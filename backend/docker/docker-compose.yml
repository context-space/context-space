version: '3.8'

services:
  # Main application service
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      # args:
      #   - GOPROXY=https://goproxy.cn,direct
    container_name: context-space-backend
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - APP_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=contextspace
      - DB_SSL_MODE=disable
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - VAULT_ADDR=http://vault:8200
      # - GOPROXY=https://goproxy.cn,direct
    depends_on:
      - postgres
      - redis
      - vault
    networks:
      - context-space-network
    volumes:
      - ../configs:/app/configs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: context-space-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=contextspace
    ports:
      - "5433:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - context-space-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # pgAdmin for PostgreSQL management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: context-space-pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_CONFIG_SERVER_MODE=False
    ports:
      - "5050:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - context-space-network
    depends_on:
      - postgres

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: context-space-redis
    restart: unless-stopped
    ports:
      - "6380:6379"
    volumes:
      - redis-data:/data
    networks:
      - context-space-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # HashiCorp Vault for secrets management
  vault:
    image: hashicorp/vault:1.16
    container_name: context-space-vault
    restart: unless-stopped
    cap_add:
      - IPC_LOCK
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=root
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
      - VAULT_ADDR=http://127.0.0.1:8200
    ports:
      - "8200:8200"
    volumes:
      - ../scripts/vault:/vault/scripts
    command: ["vault", "server", "-dev", "-dev-root-token-id=root", "-dev-listen-address=0.0.0.0:8200"]
    networks:
      - context-space-network
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # OpenTelemetry Collector for observability
  otel-collector:
    image: otel/opentelemetry-collector:0.94.0
    container_name: context-space-otel
    restart: unless-stopped
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ../configs/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317" # OTLP gRPC
      - "4318:4318" # OTLP HTTP
      - "8889:8889" # Metrics exposure
    networks:
      - context-space-network
    depends_on:
      - jaeger

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: context-space-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686" # UI
      - "14250:14250" # Model
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - context-space-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:v2.49.0
    container_name: context-space-prometheus
    restart: unless-stopped
    volumes:
      - ../configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9091:9090"
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
    networks:
      - context-space-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:10.3.1
    container_name: context-space-grafana
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - context-space-network
    depends_on:
      - prometheus

networks:
  context-space-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  prometheus_data:
  grafana_data:
  pgadmin-data: