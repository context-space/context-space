// Code generated by mockery v2.53.4. DO NOT EDIT.

package shared_mocks

import (
	context "context"

	events "github.com/context-space/context-space/backend/internal/shared/events"
	mock "github.com/stretchr/testify/mock"
)

// MockEventBus is an autogenerated mock type for the EventBus type
type MockEventBus struct {
	mock.Mock
}

type MockEventBus_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventBus) EXPECT() *MockEventBus_Expecter {
	return &MockEventBus_Expecter{mock: &_m.Mock}
}

// Publish provides a mock function with given fields: ctx, event
func (_m *MockEventBus) Publish(ctx context.Context, event events.Event) error {
	ret := _m.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, events.Event) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventBus_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockEventBus_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - event events.Event
func (_e *MockEventBus_Expecter) Publish(ctx interface{}, event interface{}) *MockEventBus_Publish_Call {
	return &MockEventBus_Publish_Call{Call: _e.mock.On("Publish", ctx, event)}
}

func (_c *MockEventBus_Publish_Call) Run(run func(ctx context.Context, event events.Event)) *MockEventBus_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(events.Event))
	})
	return _c
}

func (_c *MockEventBus_Publish_Call) Return(_a0 error) *MockEventBus_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventBus_Publish_Call) RunAndReturn(run func(context.Context, events.Event) error) *MockEventBus_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: eventType, handler
func (_m *MockEventBus) Subscribe(eventType string, handler events.EventHandler) {
	_m.Called(eventType, handler)
}

// MockEventBus_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockEventBus_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - eventType string
//   - handler events.EventHandler
func (_e *MockEventBus_Expecter) Subscribe(eventType interface{}, handler interface{}) *MockEventBus_Subscribe_Call {
	return &MockEventBus_Subscribe_Call{Call: _e.mock.On("Subscribe", eventType, handler)}
}

func (_c *MockEventBus_Subscribe_Call) Run(run func(eventType string, handler events.EventHandler)) *MockEventBus_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(events.EventHandler))
	})
	return _c
}

func (_c *MockEventBus_Subscribe_Call) Return() *MockEventBus_Subscribe_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventBus_Subscribe_Call) RunAndReturn(run func(string, events.EventHandler)) *MockEventBus_Subscribe_Call {
	_c.Run(run)
	return _c
}

// Unsubscribe provides a mock function with given fields: eventType, handler
func (_m *MockEventBus) Unsubscribe(eventType string, handler events.EventHandler) {
	_m.Called(eventType, handler)
}

// MockEventBus_Unsubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unsubscribe'
type MockEventBus_Unsubscribe_Call struct {
	*mock.Call
}

// Unsubscribe is a helper method to define mock.On call
//   - eventType string
//   - handler events.EventHandler
func (_e *MockEventBus_Expecter) Unsubscribe(eventType interface{}, handler interface{}) *MockEventBus_Unsubscribe_Call {
	return &MockEventBus_Unsubscribe_Call{Call: _e.mock.On("Unsubscribe", eventType, handler)}
}

func (_c *MockEventBus_Unsubscribe_Call) Run(run func(eventType string, handler events.EventHandler)) *MockEventBus_Unsubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(events.EventHandler))
	})
	return _c
}

func (_c *MockEventBus_Unsubscribe_Call) Return() *MockEventBus_Unsubscribe_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventBus_Unsubscribe_Call) RunAndReturn(run func(string, events.EventHandler)) *MockEventBus_Unsubscribe_Call {
	_c.Run(run)
	return _c
}

// NewMockEventBus creates a new instance of MockEventBus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventBus(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventBus {
	mock := &MockEventBus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
