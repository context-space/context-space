// Code generated by mockery v2.53.4. DO NOT EDIT.

package shared_mocks

import (
	database "github.com/context-space/context-space/backend/internal/shared/infrastructure/database"
	mock "github.com/stretchr/testify/mock"
)

// MockUnitOfWorkFactory is an autogenerated mock type for the UnitOfWorkFactory type
type MockUnitOfWorkFactory struct {
	mock.Mock
}

type MockUnitOfWorkFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUnitOfWorkFactory) EXPECT() *MockUnitOfWorkFactory_Expecter {
	return &MockUnitOfWorkFactory_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with no fields
func (_m *MockUnitOfWorkFactory) Create() database.UnitOfWork {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 database.UnitOfWork
	if rf, ok := ret.Get(0).(func() database.UnitOfWork); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.UnitOfWork)
		}
	}

	return r0
}

// MockUnitOfWorkFactory_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUnitOfWorkFactory_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
func (_e *MockUnitOfWorkFactory_Expecter) Create() *MockUnitOfWorkFactory_Create_Call {
	return &MockUnitOfWorkFactory_Create_Call{Call: _e.mock.On("Create")}
}

func (_c *MockUnitOfWorkFactory_Create_Call) Run(run func()) *MockUnitOfWorkFactory_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUnitOfWorkFactory_Create_Call) Return(_a0 database.UnitOfWork) *MockUnitOfWorkFactory_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUnitOfWorkFactory_Create_Call) RunAndReturn(run func() database.UnitOfWork) *MockUnitOfWorkFactory_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUnitOfWorkFactory creates a new instance of MockUnitOfWorkFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUnitOfWorkFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUnitOfWorkFactory {
	mock := &MockUnitOfWorkFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
