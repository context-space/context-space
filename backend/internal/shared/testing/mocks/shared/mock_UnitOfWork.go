// Code generated by mockery v2.53.4. DO NOT EDIT.

package shared_mocks

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// MockUnitOfWork is an autogenerated mock type for the UnitOfWork type
type MockUnitOfWork struct {
	mock.Mock
}

type MockUnitOfWork_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUnitOfWork) EXPECT() *MockUnitOfWork_Expecter {
	return &MockUnitOfWork_Expecter{mock: &_m.Mock}
}

// Begin provides a mock function with given fields: ctx
func (_m *MockUnitOfWork) Begin(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUnitOfWork_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type MockUnitOfWork_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUnitOfWork_Expecter) Begin(ctx interface{}) *MockUnitOfWork_Begin_Call {
	return &MockUnitOfWork_Begin_Call{Call: _e.mock.On("Begin", ctx)}
}

func (_c *MockUnitOfWork_Begin_Call) Run(run func(ctx context.Context)) *MockUnitOfWork_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUnitOfWork_Begin_Call) Return(_a0 error) *MockUnitOfWork_Begin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUnitOfWork_Begin_Call) RunAndReturn(run func(context.Context) error) *MockUnitOfWork_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function with given fields: ctx
func (_m *MockUnitOfWork) Commit(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUnitOfWork_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockUnitOfWork_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUnitOfWork_Expecter) Commit(ctx interface{}) *MockUnitOfWork_Commit_Call {
	return &MockUnitOfWork_Commit_Call{Call: _e.mock.On("Commit", ctx)}
}

func (_c *MockUnitOfWork_Commit_Call) Run(run func(ctx context.Context)) *MockUnitOfWork_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUnitOfWork_Commit_Call) Return(_a0 error) *MockUnitOfWork_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUnitOfWork_Commit_Call) RunAndReturn(run func(context.Context) error) *MockUnitOfWork_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// GetTx provides a mock function with no fields
func (_m *MockUnitOfWork) GetTx() *gorm.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTx")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// MockUnitOfWork_GetTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTx'
type MockUnitOfWork_GetTx_Call struct {
	*mock.Call
}

// GetTx is a helper method to define mock.On call
func (_e *MockUnitOfWork_Expecter) GetTx() *MockUnitOfWork_GetTx_Call {
	return &MockUnitOfWork_GetTx_Call{Call: _e.mock.On("GetTx")}
}

func (_c *MockUnitOfWork_GetTx_Call) Run(run func()) *MockUnitOfWork_GetTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUnitOfWork_GetTx_Call) Return(_a0 *gorm.DB) *MockUnitOfWork_GetTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUnitOfWork_GetTx_Call) RunAndReturn(run func() *gorm.DB) *MockUnitOfWork_GetTx_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function with given fields: ctx
func (_m *MockUnitOfWork) Rollback(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUnitOfWork_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type MockUnitOfWork_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUnitOfWork_Expecter) Rollback(ctx interface{}) *MockUnitOfWork_Rollback_Call {
	return &MockUnitOfWork_Rollback_Call{Call: _e.mock.On("Rollback", ctx)}
}

func (_c *MockUnitOfWork_Rollback_Call) Run(run func(ctx context.Context)) *MockUnitOfWork_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUnitOfWork_Rollback_Call) Return(_a0 error) *MockUnitOfWork_Rollback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUnitOfWork_Rollback_Call) RunAndReturn(run func(context.Context) error) *MockUnitOfWork_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUnitOfWork creates a new instance of MockUnitOfWork. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUnitOfWork(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUnitOfWork {
	mock := &MockUnitOfWork{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
