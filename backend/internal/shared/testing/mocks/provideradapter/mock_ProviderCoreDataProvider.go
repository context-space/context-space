// Code generated by mockery v2.53.4. DO NOT EDIT.

package provideradapter_mocks

import (
	context "context"

	domain "github.com/context-space/context-space/backend/internal/providercore/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockProviderCoreDataProvider is an autogenerated mock type for the ProviderCoreDataProvider type
type MockProviderCoreDataProvider struct {
	mock.Mock
}

type MockProviderCoreDataProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProviderCoreDataProvider) EXPECT() *MockProviderCoreDataProvider_Expecter {
	return &MockProviderCoreDataProvider_Expecter{mock: &_m.Mock}
}

// GetProviderCoreData provides a mock function with given fields: ctx, identifier
func (_m *MockProviderCoreDataProvider) GetProviderCoreData(ctx context.Context, identifier string) (*domain.Provider, error) {
	ret := _m.Called(ctx, identifier)

	if len(ret) == 0 {
		panic("no return value specified for GetProviderCoreData")
	}

	var r0 *domain.Provider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Provider, error)); ok {
		return rf(ctx, identifier)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Provider); ok {
		r0 = rf(ctx, identifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Provider)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, identifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderCoreDataProvider_GetProviderCoreData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProviderCoreData'
type MockProviderCoreDataProvider_GetProviderCoreData_Call struct {
	*mock.Call
}

// GetProviderCoreData is a helper method to define mock.On call
//   - ctx context.Context
//   - identifier string
func (_e *MockProviderCoreDataProvider_Expecter) GetProviderCoreData(ctx interface{}, identifier interface{}) *MockProviderCoreDataProvider_GetProviderCoreData_Call {
	return &MockProviderCoreDataProvider_GetProviderCoreData_Call{Call: _e.mock.On("GetProviderCoreData", ctx, identifier)}
}

func (_c *MockProviderCoreDataProvider_GetProviderCoreData_Call) Run(run func(ctx context.Context, identifier string)) *MockProviderCoreDataProvider_GetProviderCoreData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProviderCoreDataProvider_GetProviderCoreData_Call) Return(_a0 *domain.Provider, _a1 error) *MockProviderCoreDataProvider_GetProviderCoreData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderCoreDataProvider_GetProviderCoreData_Call) RunAndReturn(run func(context.Context, string) (*domain.Provider, error)) *MockProviderCoreDataProvider_GetProviderCoreData_Call {
	_c.Call.Return(run)
	return _c
}

// ListProviders provides a mock function with given fields: ctx
func (_m *MockProviderCoreDataProvider) ListProviders(ctx context.Context) ([]*domain.Provider, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListProviders")
	}

	var r0 []*domain.Provider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*domain.Provider, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.Provider); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Provider)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderCoreDataProvider_ListProviders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProviders'
type MockProviderCoreDataProvider_ListProviders_Call struct {
	*mock.Call
}

// ListProviders is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProviderCoreDataProvider_Expecter) ListProviders(ctx interface{}) *MockProviderCoreDataProvider_ListProviders_Call {
	return &MockProviderCoreDataProvider_ListProviders_Call{Call: _e.mock.On("ListProviders", ctx)}
}

func (_c *MockProviderCoreDataProvider_ListProviders_Call) Run(run func(ctx context.Context)) *MockProviderCoreDataProvider_ListProviders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockProviderCoreDataProvider_ListProviders_Call) Return(_a0 []*domain.Provider, _a1 error) *MockProviderCoreDataProvider_ListProviders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderCoreDataProvider_ListProviders_Call) RunAndReturn(run func(context.Context) ([]*domain.Provider, error)) *MockProviderCoreDataProvider_ListProviders_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProviderCoreDataProvider creates a new instance of MockProviderCoreDataProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProviderCoreDataProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProviderCoreDataProvider {
	mock := &MockProviderCoreDataProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
