// Code generated by mockery v2.53.4. DO NOT EDIT.

package provideradapter_mocks

import (
	context "context"

	domain "github.com/context-space/context-space/backend/internal/provideradapter/domain"
	mock "github.com/stretchr/testify/mock"

	oauth2 "golang.org/x/oauth2"
)

// MockOAuthAdapter is an autogenerated mock type for the OAuthAdapter type
type MockOAuthAdapter struct {
	mock.Mock
}

type MockOAuthAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOAuthAdapter) EXPECT() *MockOAuthAdapter_Expecter {
	return &MockOAuthAdapter_Expecter{mock: &_m.Mock}
}

// CheckMissingPermissions provides a mock function with given fields: operationIdentifier, authorizedScopes
func (_m *MockOAuthAdapter) CheckMissingPermissions(operationIdentifier string, authorizedScopes []string) (bool, []string, error) {
	ret := _m.Called(operationIdentifier, authorizedScopes)

	if len(ret) == 0 {
		panic("no return value specified for CheckMissingPermissions")
	}

	var r0 bool
	var r1 []string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, []string) (bool, []string, error)); ok {
		return rf(operationIdentifier, authorizedScopes)
	}
	if rf, ok := ret.Get(0).(func(string, []string) bool); ok {
		r0 = rf(operationIdentifier, authorizedScopes)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, []string) []string); ok {
		r1 = rf(operationIdentifier, authorizedScopes)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	if rf, ok := ret.Get(2).(func(string, []string) error); ok {
		r2 = rf(operationIdentifier, authorizedScopes)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockOAuthAdapter_CheckMissingPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckMissingPermissions'
type MockOAuthAdapter_CheckMissingPermissions_Call struct {
	*mock.Call
}

// CheckMissingPermissions is a helper method to define mock.On call
//   - operationIdentifier string
//   - authorizedScopes []string
func (_e *MockOAuthAdapter_Expecter) CheckMissingPermissions(operationIdentifier interface{}, authorizedScopes interface{}) *MockOAuthAdapter_CheckMissingPermissions_Call {
	return &MockOAuthAdapter_CheckMissingPermissions_Call{Call: _e.mock.On("CheckMissingPermissions", operationIdentifier, authorizedScopes)}
}

func (_c *MockOAuthAdapter_CheckMissingPermissions_Call) Run(run func(operationIdentifier string, authorizedScopes []string)) *MockOAuthAdapter_CheckMissingPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string))
	})
	return _c
}

func (_c *MockOAuthAdapter_CheckMissingPermissions_Call) Return(_a0 bool, _a1 []string, _a2 error) *MockOAuthAdapter_CheckMissingPermissions_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockOAuthAdapter_CheckMissingPermissions_Call) RunAndReturn(run func(string, []string) (bool, []string, error)) *MockOAuthAdapter_CheckMissingPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// ExchangeCodeForTokens provides a mock function with given fields: ctx, code, redirectURL, codeVerifier
func (_m *MockOAuthAdapter) ExchangeCodeForTokens(ctx context.Context, code string, redirectURL string, codeVerifier string) (*oauth2.Token, error) {
	ret := _m.Called(ctx, code, redirectURL, codeVerifier)

	if len(ret) == 0 {
		panic("no return value specified for ExchangeCodeForTokens")
	}

	var r0 *oauth2.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*oauth2.Token, error)); ok {
		return rf(ctx, code, redirectURL, codeVerifier)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *oauth2.Token); ok {
		r0 = rf(ctx, code, redirectURL, codeVerifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, code, redirectURL, codeVerifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOAuthAdapter_ExchangeCodeForTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExchangeCodeForTokens'
type MockOAuthAdapter_ExchangeCodeForTokens_Call struct {
	*mock.Call
}

// ExchangeCodeForTokens is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
//   - redirectURL string
//   - codeVerifier string
func (_e *MockOAuthAdapter_Expecter) ExchangeCodeForTokens(ctx interface{}, code interface{}, redirectURL interface{}, codeVerifier interface{}) *MockOAuthAdapter_ExchangeCodeForTokens_Call {
	return &MockOAuthAdapter_ExchangeCodeForTokens_Call{Call: _e.mock.On("ExchangeCodeForTokens", ctx, code, redirectURL, codeVerifier)}
}

func (_c *MockOAuthAdapter_ExchangeCodeForTokens_Call) Run(run func(ctx context.Context, code string, redirectURL string, codeVerifier string)) *MockOAuthAdapter_ExchangeCodeForTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockOAuthAdapter_ExchangeCodeForTokens_Call) Return(_a0 *oauth2.Token, _a1 error) *MockOAuthAdapter_ExchangeCodeForTokens_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOAuthAdapter_ExchangeCodeForTokens_Call) RunAndReturn(run func(context.Context, string, string, string) (*oauth2.Token, error)) *MockOAuthAdapter_ExchangeCodeForTokens_Call {
	_c.Call.Return(run)
	return _c
}

// Execute provides a mock function with given fields: ctx, operationID, params, credential
func (_m *MockOAuthAdapter) Execute(ctx context.Context, operationID string, params map[string]interface{}, credential interface{}) (interface{}, error) {
	ret := _m.Called(ctx, operationID, params, credential)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}, interface{}) (interface{}, error)); ok {
		return rf(ctx, operationID, params, credential)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}, interface{}) interface{}); ok {
		r0 = rf(ctx, operationID, params, credential)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]interface{}, interface{}) error); ok {
		r1 = rf(ctx, operationID, params, credential)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOAuthAdapter_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockOAuthAdapter_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - operationID string
//   - params map[string]interface{}
//   - credential interface{}
func (_e *MockOAuthAdapter_Expecter) Execute(ctx interface{}, operationID interface{}, params interface{}, credential interface{}) *MockOAuthAdapter_Execute_Call {
	return &MockOAuthAdapter_Execute_Call{Call: _e.mock.On("Execute", ctx, operationID, params, credential)}
}

func (_c *MockOAuthAdapter_Execute_Call) Run(run func(ctx context.Context, operationID string, params map[string]interface{}, credential interface{})) *MockOAuthAdapter_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]interface{}), args[3].(interface{}))
	})
	return _c
}

func (_c *MockOAuthAdapter_Execute_Call) Return(_a0 interface{}, _a1 error) *MockOAuthAdapter_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOAuthAdapter_Execute_Call) RunAndReturn(run func(context.Context, string, map[string]interface{}, interface{}) (interface{}, error)) *MockOAuthAdapter_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateOAuthURL provides a mock function with given fields: ctx, redirectURL, state, codeChallenge, scopes
func (_m *MockOAuthAdapter) GenerateOAuthURL(ctx context.Context, redirectURL string, state string, codeChallenge string, scopes []string) (string, error) {
	ret := _m.Called(ctx, redirectURL, state, codeChallenge, scopes)

	if len(ret) == 0 {
		panic("no return value specified for GenerateOAuthURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []string) (string, error)); ok {
		return rf(ctx, redirectURL, state, codeChallenge, scopes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []string) string); ok {
		r0 = rf(ctx, redirectURL, state, codeChallenge, scopes)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, []string) error); ok {
		r1 = rf(ctx, redirectURL, state, codeChallenge, scopes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOAuthAdapter_GenerateOAuthURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateOAuthURL'
type MockOAuthAdapter_GenerateOAuthURL_Call struct {
	*mock.Call
}

// GenerateOAuthURL is a helper method to define mock.On call
//   - ctx context.Context
//   - redirectURL string
//   - state string
//   - codeChallenge string
//   - scopes []string
func (_e *MockOAuthAdapter_Expecter) GenerateOAuthURL(ctx interface{}, redirectURL interface{}, state interface{}, codeChallenge interface{}, scopes interface{}) *MockOAuthAdapter_GenerateOAuthURL_Call {
	return &MockOAuthAdapter_GenerateOAuthURL_Call{Call: _e.mock.On("GenerateOAuthURL", ctx, redirectURL, state, codeChallenge, scopes)}
}

func (_c *MockOAuthAdapter_GenerateOAuthURL_Call) Run(run func(ctx context.Context, redirectURL string, state string, codeChallenge string, scopes []string)) *MockOAuthAdapter_GenerateOAuthURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]string))
	})
	return _c
}

func (_c *MockOAuthAdapter_GenerateOAuthURL_Call) Return(_a0 string, _a1 error) *MockOAuthAdapter_GenerateOAuthURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOAuthAdapter_GenerateOAuthURL_Call) RunAndReturn(run func(context.Context, string, string, string, []string) (string, error)) *MockOAuthAdapter_GenerateOAuthURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissionIdentifiersFromScopes provides a mock function with given fields: scopes
func (_m *MockOAuthAdapter) GetPermissionIdentifiersFromScopes(scopes []string) ([]string, error) {
	ret := _m.Called(scopes)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionIdentifiersFromScopes")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]string, error)); ok {
		return rf(scopes)
	}
	if rf, ok := ret.Get(0).(func([]string) []string); ok {
		r0 = rf(scopes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(scopes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOAuthAdapter_GetPermissionIdentifiersFromScopes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissionIdentifiersFromScopes'
type MockOAuthAdapter_GetPermissionIdentifiersFromScopes_Call struct {
	*mock.Call
}

// GetPermissionIdentifiersFromScopes is a helper method to define mock.On call
//   - scopes []string
func (_e *MockOAuthAdapter_Expecter) GetPermissionIdentifiersFromScopes(scopes interface{}) *MockOAuthAdapter_GetPermissionIdentifiersFromScopes_Call {
	return &MockOAuthAdapter_GetPermissionIdentifiersFromScopes_Call{Call: _e.mock.On("GetPermissionIdentifiersFromScopes", scopes)}
}

func (_c *MockOAuthAdapter_GetPermissionIdentifiersFromScopes_Call) Run(run func(scopes []string)) *MockOAuthAdapter_GetPermissionIdentifiersFromScopes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockOAuthAdapter_GetPermissionIdentifiersFromScopes_Call) Return(_a0 []string, _a1 error) *MockOAuthAdapter_GetPermissionIdentifiersFromScopes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOAuthAdapter_GetPermissionIdentifiersFromScopes_Call) RunAndReturn(run func([]string) ([]string, error)) *MockOAuthAdapter_GetPermissionIdentifiersFromScopes_Call {
	_c.Call.Return(run)
	return _c
}

// GetProviderAdapterInfo provides a mock function with no fields
func (_m *MockOAuthAdapter) GetProviderAdapterInfo() *domain.ProviderAdapterInfo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProviderAdapterInfo")
	}

	var r0 *domain.ProviderAdapterInfo
	if rf, ok := ret.Get(0).(func() *domain.ProviderAdapterInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProviderAdapterInfo)
		}
	}

	return r0
}

// MockOAuthAdapter_GetProviderAdapterInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProviderAdapterInfo'
type MockOAuthAdapter_GetProviderAdapterInfo_Call struct {
	*mock.Call
}

// GetProviderAdapterInfo is a helper method to define mock.On call
func (_e *MockOAuthAdapter_Expecter) GetProviderAdapterInfo() *MockOAuthAdapter_GetProviderAdapterInfo_Call {
	return &MockOAuthAdapter_GetProviderAdapterInfo_Call{Call: _e.mock.On("GetProviderAdapterInfo")}
}

func (_c *MockOAuthAdapter_GetProviderAdapterInfo_Call) Run(run func()) *MockOAuthAdapter_GetProviderAdapterInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOAuthAdapter_GetProviderAdapterInfo_Call) Return(_a0 *domain.ProviderAdapterInfo) *MockOAuthAdapter_GetProviderAdapterInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOAuthAdapter_GetProviderAdapterInfo_Call) RunAndReturn(run func() *domain.ProviderAdapterInfo) *MockOAuthAdapter_GetProviderAdapterInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetScopesFromPermissions provides a mock function with given fields: permissions
func (_m *MockOAuthAdapter) GetScopesFromPermissions(permissions []string) ([]string, error) {
	ret := _m.Called(permissions)

	if len(ret) == 0 {
		panic("no return value specified for GetScopesFromPermissions")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]string, error)); ok {
		return rf(permissions)
	}
	if rf, ok := ret.Get(0).(func([]string) []string); ok {
		r0 = rf(permissions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(permissions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOAuthAdapter_GetScopesFromPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScopesFromPermissions'
type MockOAuthAdapter_GetScopesFromPermissions_Call struct {
	*mock.Call
}

// GetScopesFromPermissions is a helper method to define mock.On call
//   - permissions []string
func (_e *MockOAuthAdapter_Expecter) GetScopesFromPermissions(permissions interface{}) *MockOAuthAdapter_GetScopesFromPermissions_Call {
	return &MockOAuthAdapter_GetScopesFromPermissions_Call{Call: _e.mock.On("GetScopesFromPermissions", permissions)}
}

func (_c *MockOAuthAdapter_GetScopesFromPermissions_Call) Run(run func(permissions []string)) *MockOAuthAdapter_GetScopesFromPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockOAuthAdapter_GetScopesFromPermissions_Call) Return(_a0 []string, _a1 error) *MockOAuthAdapter_GetScopesFromPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOAuthAdapter_GetScopesFromPermissions_Call) RunAndReturn(run func([]string) ([]string, error)) *MockOAuthAdapter_GetScopesFromPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshOAuthToken provides a mock function with given fields: ctx, oldToken
func (_m *MockOAuthAdapter) RefreshOAuthToken(ctx context.Context, oldToken *oauth2.Token) (*oauth2.Token, error) {
	ret := _m.Called(ctx, oldToken)

	if len(ret) == 0 {
		panic("no return value specified for RefreshOAuthToken")
	}

	var r0 *oauth2.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *oauth2.Token) (*oauth2.Token, error)); ok {
		return rf(ctx, oldToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *oauth2.Token) *oauth2.Token); ok {
		r0 = rf(ctx, oldToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *oauth2.Token) error); ok {
		r1 = rf(ctx, oldToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOAuthAdapter_RefreshOAuthToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshOAuthToken'
type MockOAuthAdapter_RefreshOAuthToken_Call struct {
	*mock.Call
}

// RefreshOAuthToken is a helper method to define mock.On call
//   - ctx context.Context
//   - oldToken *oauth2.Token
func (_e *MockOAuthAdapter_Expecter) RefreshOAuthToken(ctx interface{}, oldToken interface{}) *MockOAuthAdapter_RefreshOAuthToken_Call {
	return &MockOAuthAdapter_RefreshOAuthToken_Call{Call: _e.mock.On("RefreshOAuthToken", ctx, oldToken)}
}

func (_c *MockOAuthAdapter_RefreshOAuthToken_Call) Run(run func(ctx context.Context, oldToken *oauth2.Token)) *MockOAuthAdapter_RefreshOAuthToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*oauth2.Token))
	})
	return _c
}

func (_c *MockOAuthAdapter_RefreshOAuthToken_Call) Return(_a0 *oauth2.Token, _a1 error) *MockOAuthAdapter_RefreshOAuthToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOAuthAdapter_RefreshOAuthToken_Call) RunAndReturn(run func(context.Context, *oauth2.Token) (*oauth2.Token, error)) *MockOAuthAdapter_RefreshOAuthToken_Call {
	_c.Call.Return(run)
	return _c
}

// ShouldRefreshToken provides a mock function with given fields: oldToken
func (_m *MockOAuthAdapter) ShouldRefreshToken(oldToken *oauth2.Token) bool {
	ret := _m.Called(oldToken)

	if len(ret) == 0 {
		panic("no return value specified for ShouldRefreshToken")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*oauth2.Token) bool); ok {
		r0 = rf(oldToken)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockOAuthAdapter_ShouldRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShouldRefreshToken'
type MockOAuthAdapter_ShouldRefreshToken_Call struct {
	*mock.Call
}

// ShouldRefreshToken is a helper method to define mock.On call
//   - oldToken *oauth2.Token
func (_e *MockOAuthAdapter_Expecter) ShouldRefreshToken(oldToken interface{}) *MockOAuthAdapter_ShouldRefreshToken_Call {
	return &MockOAuthAdapter_ShouldRefreshToken_Call{Call: _e.mock.On("ShouldRefreshToken", oldToken)}
}

func (_c *MockOAuthAdapter_ShouldRefreshToken_Call) Run(run func(oldToken *oauth2.Token)) *MockOAuthAdapter_ShouldRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*oauth2.Token))
	})
	return _c
}

func (_c *MockOAuthAdapter_ShouldRefreshToken_Call) Return(_a0 bool) *MockOAuthAdapter_ShouldRefreshToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOAuthAdapter_ShouldRefreshToken_Call) RunAndReturn(run func(*oauth2.Token) bool) *MockOAuthAdapter_ShouldRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOAuthAdapter creates a new instance of MockOAuthAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOAuthAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOAuthAdapter {
	mock := &MockOAuthAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
