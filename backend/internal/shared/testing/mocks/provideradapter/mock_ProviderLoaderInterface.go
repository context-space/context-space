// Code generated by mockery v2.53.4. DO NOT EDIT.

package provideradapter_mocks

import (
	domain "github.com/context-space/context-space/backend/internal/provideradapter/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockProviderLoaderInterface is an autogenerated mock type for the ProviderLoaderInterface type
type MockProviderLoaderInterface struct {
	mock.Mock
}

type MockProviderLoaderInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProviderLoaderInterface) EXPECT() *MockProviderLoaderInterface_Expecter {
	return &MockProviderLoaderInterface_Expecter{mock: &_m.Mock}
}

// GetLoadedProviders provides a mock function with no fields
func (_m *MockProviderLoaderInterface) GetLoadedProviders() []domain.ProviderAdapterInfo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLoadedProviders")
	}

	var r0 []domain.ProviderAdapterInfo
	if rf, ok := ret.Get(0).(func() []domain.ProviderAdapterInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProviderAdapterInfo)
		}
	}

	return r0
}

// MockProviderLoaderInterface_GetLoadedProviders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLoadedProviders'
type MockProviderLoaderInterface_GetLoadedProviders_Call struct {
	*mock.Call
}

// GetLoadedProviders is a helper method to define mock.On call
func (_e *MockProviderLoaderInterface_Expecter) GetLoadedProviders() *MockProviderLoaderInterface_GetLoadedProviders_Call {
	return &MockProviderLoaderInterface_GetLoadedProviders_Call{Call: _e.mock.On("GetLoadedProviders")}
}

func (_c *MockProviderLoaderInterface_GetLoadedProviders_Call) Run(run func()) *MockProviderLoaderInterface_GetLoadedProviders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProviderLoaderInterface_GetLoadedProviders_Call) Return(_a0 []domain.ProviderAdapterInfo) *MockProviderLoaderInterface_GetLoadedProviders_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderLoaderInterface_GetLoadedProviders_Call) RunAndReturn(run func() []domain.ProviderAdapterInfo) *MockProviderLoaderInterface_GetLoadedProviders_Call {
	_c.Call.Return(run)
	return _c
}

// LoadProvider provides a mock function with given fields: config
func (_m *MockProviderLoaderInterface) LoadProvider(config *domain.ProviderAdapterConfig) error {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for LoadProvider")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.ProviderAdapterConfig) error); ok {
		r0 = rf(config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProviderLoaderInterface_LoadProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadProvider'
type MockProviderLoaderInterface_LoadProvider_Call struct {
	*mock.Call
}

// LoadProvider is a helper method to define mock.On call
//   - config *domain.ProviderAdapterConfig
func (_e *MockProviderLoaderInterface_Expecter) LoadProvider(config interface{}) *MockProviderLoaderInterface_LoadProvider_Call {
	return &MockProviderLoaderInterface_LoadProvider_Call{Call: _e.mock.On("LoadProvider", config)}
}

func (_c *MockProviderLoaderInterface_LoadProvider_Call) Run(run func(config *domain.ProviderAdapterConfig)) *MockProviderLoaderInterface_LoadProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.ProviderAdapterConfig))
	})
	return _c
}

func (_c *MockProviderLoaderInterface_LoadProvider_Call) Return(_a0 error) *MockProviderLoaderInterface_LoadProvider_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderLoaderInterface_LoadProvider_Call) RunAndReturn(run func(*domain.ProviderAdapterConfig) error) *MockProviderLoaderInterface_LoadProvider_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProviderLoaderInterface creates a new instance of MockProviderLoaderInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProviderLoaderInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProviderLoaderInterface {
	mock := &MockProviderLoaderInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
