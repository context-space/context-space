// Code generated by mockery v2.53.4. DO NOT EDIT.

package provideradapter_mocks

import (
	domain "github.com/context-space/context-space/backend/internal/provideradapter/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockAdapterTemplate is an autogenerated mock type for the AdapterTemplate type
type MockAdapterTemplate struct {
	mock.Mock
}

type MockAdapterTemplate_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAdapterTemplate) EXPECT() *MockAdapterTemplate_Expecter {
	return &MockAdapterTemplate_Expecter{mock: &_m.Mock}
}

// CreateAdapter provides a mock function with given fields: provider
func (_m *MockAdapterTemplate) CreateAdapter(provider *domain.ProviderAdapterConfig) (domain.Adapter, error) {
	ret := _m.Called(provider)

	if len(ret) == 0 {
		panic("no return value specified for CreateAdapter")
	}

	var r0 domain.Adapter
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.ProviderAdapterConfig) (domain.Adapter, error)); ok {
		return rf(provider)
	}
	if rf, ok := ret.Get(0).(func(*domain.ProviderAdapterConfig) domain.Adapter); ok {
		r0 = rf(provider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Adapter)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.ProviderAdapterConfig) error); ok {
		r1 = rf(provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdapterTemplate_CreateAdapter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAdapter'
type MockAdapterTemplate_CreateAdapter_Call struct {
	*mock.Call
}

// CreateAdapter is a helper method to define mock.On call
//   - provider *domain.ProviderAdapterConfig
func (_e *MockAdapterTemplate_Expecter) CreateAdapter(provider interface{}) *MockAdapterTemplate_CreateAdapter_Call {
	return &MockAdapterTemplate_CreateAdapter_Call{Call: _e.mock.On("CreateAdapter", provider)}
}

func (_c *MockAdapterTemplate_CreateAdapter_Call) Run(run func(provider *domain.ProviderAdapterConfig)) *MockAdapterTemplate_CreateAdapter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.ProviderAdapterConfig))
	})
	return _c
}

func (_c *MockAdapterTemplate_CreateAdapter_Call) Return(_a0 domain.Adapter, _a1 error) *MockAdapterTemplate_CreateAdapter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdapterTemplate_CreateAdapter_Call) RunAndReturn(run func(*domain.ProviderAdapterConfig) (domain.Adapter, error)) *MockAdapterTemplate_CreateAdapter_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateConfig provides a mock function with given fields: provider
func (_m *MockAdapterTemplate) ValidateConfig(provider *domain.ProviderAdapterConfig) error {
	ret := _m.Called(provider)

	if len(ret) == 0 {
		panic("no return value specified for ValidateConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.ProviderAdapterConfig) error); ok {
		r0 = rf(provider)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAdapterTemplate_ValidateConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateConfig'
type MockAdapterTemplate_ValidateConfig_Call struct {
	*mock.Call
}

// ValidateConfig is a helper method to define mock.On call
//   - provider *domain.ProviderAdapterConfig
func (_e *MockAdapterTemplate_Expecter) ValidateConfig(provider interface{}) *MockAdapterTemplate_ValidateConfig_Call {
	return &MockAdapterTemplate_ValidateConfig_Call{Call: _e.mock.On("ValidateConfig", provider)}
}

func (_c *MockAdapterTemplate_ValidateConfig_Call) Run(run func(provider *domain.ProviderAdapterConfig)) *MockAdapterTemplate_ValidateConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.ProviderAdapterConfig))
	})
	return _c
}

func (_c *MockAdapterTemplate_ValidateConfig_Call) Return(_a0 error) *MockAdapterTemplate_ValidateConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAdapterTemplate_ValidateConfig_Call) RunAndReturn(run func(*domain.ProviderAdapterConfig) error) *MockAdapterTemplate_ValidateConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAdapterTemplate creates a new instance of MockAdapterTemplate. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAdapterTemplate(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAdapterTemplate {
	mock := &MockAdapterTemplate{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
