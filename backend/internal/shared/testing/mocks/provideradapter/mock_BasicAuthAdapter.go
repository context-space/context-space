// Code generated by mockery v2.53.4. DO NOT EDIT.

package provideradapter_mocks

import (
	context "context"

	domain "github.com/context-space/context-space/backend/internal/provideradapter/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockBasicAuthAdapter is an autogenerated mock type for the BasicAuthAdapter type
type MockBasicAuthAdapter struct {
	mock.Mock
}

type MockBasicAuthAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBasicAuthAdapter) EXPECT() *MockBasicAuthAdapter_Expecter {
	return &MockBasicAuthAdapter_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, operationID, params, credential
func (_m *MockBasicAuthAdapter) Execute(ctx context.Context, operationID string, params map[string]interface{}, credential interface{}) (interface{}, error) {
	ret := _m.Called(ctx, operationID, params, credential)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}, interface{}) (interface{}, error)); ok {
		return rf(ctx, operationID, params, credential)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}, interface{}) interface{}); ok {
		r0 = rf(ctx, operationID, params, credential)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]interface{}, interface{}) error); ok {
		r1 = rf(ctx, operationID, params, credential)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBasicAuthAdapter_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockBasicAuthAdapter_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - operationID string
//   - params map[string]interface{}
//   - credential interface{}
func (_e *MockBasicAuthAdapter_Expecter) Execute(ctx interface{}, operationID interface{}, params interface{}, credential interface{}) *MockBasicAuthAdapter_Execute_Call {
	return &MockBasicAuthAdapter_Execute_Call{Call: _e.mock.On("Execute", ctx, operationID, params, credential)}
}

func (_c *MockBasicAuthAdapter_Execute_Call) Run(run func(ctx context.Context, operationID string, params map[string]interface{}, credential interface{})) *MockBasicAuthAdapter_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]interface{}), args[3].(interface{}))
	})
	return _c
}

func (_c *MockBasicAuthAdapter_Execute_Call) Return(_a0 interface{}, _a1 error) *MockBasicAuthAdapter_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBasicAuthAdapter_Execute_Call) RunAndReturn(run func(context.Context, string, map[string]interface{}, interface{}) (interface{}, error)) *MockBasicAuthAdapter_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProviderAdapterInfo provides a mock function with no fields
func (_m *MockBasicAuthAdapter) GetProviderAdapterInfo() *domain.ProviderAdapterInfo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProviderAdapterInfo")
	}

	var r0 *domain.ProviderAdapterInfo
	if rf, ok := ret.Get(0).(func() *domain.ProviderAdapterInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProviderAdapterInfo)
		}
	}

	return r0
}

// MockBasicAuthAdapter_GetProviderAdapterInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProviderAdapterInfo'
type MockBasicAuthAdapter_GetProviderAdapterInfo_Call struct {
	*mock.Call
}

// GetProviderAdapterInfo is a helper method to define mock.On call
func (_e *MockBasicAuthAdapter_Expecter) GetProviderAdapterInfo() *MockBasicAuthAdapter_GetProviderAdapterInfo_Call {
	return &MockBasicAuthAdapter_GetProviderAdapterInfo_Call{Call: _e.mock.On("GetProviderAdapterInfo")}
}

func (_c *MockBasicAuthAdapter_GetProviderAdapterInfo_Call) Run(run func()) *MockBasicAuthAdapter_GetProviderAdapterInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBasicAuthAdapter_GetProviderAdapterInfo_Call) Return(_a0 *domain.ProviderAdapterInfo) *MockBasicAuthAdapter_GetProviderAdapterInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBasicAuthAdapter_GetProviderAdapterInfo_Call) RunAndReturn(run func() *domain.ProviderAdapterInfo) *MockBasicAuthAdapter_GetProviderAdapterInfo_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateBasicAuth provides a mock function with given fields: ctx, username, password
func (_m *MockBasicAuthAdapter) ValidateBasicAuth(ctx context.Context, username string, password string) error {
	ret := _m.Called(ctx, username, password)

	if len(ret) == 0 {
		panic("no return value specified for ValidateBasicAuth")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, username, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBasicAuthAdapter_ValidateBasicAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateBasicAuth'
type MockBasicAuthAdapter_ValidateBasicAuth_Call struct {
	*mock.Call
}

// ValidateBasicAuth is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - password string
func (_e *MockBasicAuthAdapter_Expecter) ValidateBasicAuth(ctx interface{}, username interface{}, password interface{}) *MockBasicAuthAdapter_ValidateBasicAuth_Call {
	return &MockBasicAuthAdapter_ValidateBasicAuth_Call{Call: _e.mock.On("ValidateBasicAuth", ctx, username, password)}
}

func (_c *MockBasicAuthAdapter_ValidateBasicAuth_Call) Run(run func(ctx context.Context, username string, password string)) *MockBasicAuthAdapter_ValidateBasicAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockBasicAuthAdapter_ValidateBasicAuth_Call) Return(_a0 error) *MockBasicAuthAdapter_ValidateBasicAuth_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBasicAuthAdapter_ValidateBasicAuth_Call) RunAndReturn(run func(context.Context, string, string) error) *MockBasicAuthAdapter_ValidateBasicAuth_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBasicAuthAdapter creates a new instance of MockBasicAuthAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBasicAuthAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBasicAuthAdapter {
	mock := &MockBasicAuthAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
