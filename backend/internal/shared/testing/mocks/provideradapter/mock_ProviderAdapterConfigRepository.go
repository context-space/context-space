// Code generated by mockery v2.53.4. DO NOT EDIT.

package provideradapter_mocks

import (
	context "context"

	domain "github.com/context-space/context-space/backend/internal/provideradapter/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockProviderAdapterConfigRepository is an autogenerated mock type for the ProviderAdapterConfigRepository type
type MockProviderAdapterConfigRepository struct {
	mock.Mock
}

type MockProviderAdapterConfigRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProviderAdapterConfigRepository) EXPECT() *MockProviderAdapterConfigRepository_Expecter {
	return &MockProviderAdapterConfigRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, provider
func (_m *MockProviderAdapterConfigRepository) Create(ctx context.Context, provider *domain.ProviderAdapterConfig) error {
	ret := _m.Called(ctx, provider)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ProviderAdapterConfig) error); ok {
		r0 = rf(ctx, provider)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProviderAdapterConfigRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockProviderAdapterConfigRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - provider *domain.ProviderAdapterConfig
func (_e *MockProviderAdapterConfigRepository_Expecter) Create(ctx interface{}, provider interface{}) *MockProviderAdapterConfigRepository_Create_Call {
	return &MockProviderAdapterConfigRepository_Create_Call{Call: _e.mock.On("Create", ctx, provider)}
}

func (_c *MockProviderAdapterConfigRepository_Create_Call) Run(run func(ctx context.Context, provider *domain.ProviderAdapterConfig)) *MockProviderAdapterConfigRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.ProviderAdapterConfig))
	})
	return _c
}

func (_c *MockProviderAdapterConfigRepository_Create_Call) Return(_a0 error) *MockProviderAdapterConfigRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderAdapterConfigRepository_Create_Call) RunAndReturn(run func(context.Context, *domain.ProviderAdapterConfig) error) *MockProviderAdapterConfigRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockProviderAdapterConfigRepository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProviderAdapterConfigRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockProviderAdapterConfigRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockProviderAdapterConfigRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockProviderAdapterConfigRepository_Delete_Call {
	return &MockProviderAdapterConfigRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockProviderAdapterConfigRepository_Delete_Call) Run(run func(ctx context.Context, id string)) *MockProviderAdapterConfigRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProviderAdapterConfigRepository_Delete_Call) Return(_a0 error) *MockProviderAdapterConfigRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderAdapterConfigRepository_Delete_Call) RunAndReturn(run func(context.Context, string) error) *MockProviderAdapterConfigRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockProviderAdapterConfigRepository) GetByID(ctx context.Context, id string) (*domain.ProviderAdapterConfig, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *domain.ProviderAdapterConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.ProviderAdapterConfig, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.ProviderAdapterConfig); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProviderAdapterConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderAdapterConfigRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockProviderAdapterConfigRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockProviderAdapterConfigRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockProviderAdapterConfigRepository_GetByID_Call {
	return &MockProviderAdapterConfigRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockProviderAdapterConfigRepository_GetByID_Call) Run(run func(ctx context.Context, id string)) *MockProviderAdapterConfigRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProviderAdapterConfigRepository_GetByID_Call) Return(_a0 *domain.ProviderAdapterConfig, _a1 error) *MockProviderAdapterConfigRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderAdapterConfigRepository_GetByID_Call) RunAndReturn(run func(context.Context, string) (*domain.ProviderAdapterConfig, error)) *MockProviderAdapterConfigRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByIdentifier provides a mock function with given fields: ctx, identifier
func (_m *MockProviderAdapterConfigRepository) GetByIdentifier(ctx context.Context, identifier string) (*domain.ProviderAdapterConfig, error) {
	ret := _m.Called(ctx, identifier)

	if len(ret) == 0 {
		panic("no return value specified for GetByIdentifier")
	}

	var r0 *domain.ProviderAdapterConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.ProviderAdapterConfig, error)); ok {
		return rf(ctx, identifier)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.ProviderAdapterConfig); ok {
		r0 = rf(ctx, identifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProviderAdapterConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, identifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderAdapterConfigRepository_GetByIdentifier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByIdentifier'
type MockProviderAdapterConfigRepository_GetByIdentifier_Call struct {
	*mock.Call
}

// GetByIdentifier is a helper method to define mock.On call
//   - ctx context.Context
//   - identifier string
func (_e *MockProviderAdapterConfigRepository_Expecter) GetByIdentifier(ctx interface{}, identifier interface{}) *MockProviderAdapterConfigRepository_GetByIdentifier_Call {
	return &MockProviderAdapterConfigRepository_GetByIdentifier_Call{Call: _e.mock.On("GetByIdentifier", ctx, identifier)}
}

func (_c *MockProviderAdapterConfigRepository_GetByIdentifier_Call) Run(run func(ctx context.Context, identifier string)) *MockProviderAdapterConfigRepository_GetByIdentifier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProviderAdapterConfigRepository_GetByIdentifier_Call) Return(_a0 *domain.ProviderAdapterConfig, _a1 error) *MockProviderAdapterConfigRepository_GetByIdentifier_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderAdapterConfigRepository_GetByIdentifier_Call) RunAndReturn(run func(context.Context, string) (*domain.ProviderAdapterConfig, error)) *MockProviderAdapterConfigRepository_GetByIdentifier_Call {
	_c.Call.Return(run)
	return _c
}

// ListAdapterConfigs provides a mock function with given fields: ctx
func (_m *MockProviderAdapterConfigRepository) ListAdapterConfigs(ctx context.Context) ([]*domain.ProviderAdapterConfig, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListAdapterConfigs")
	}

	var r0 []*domain.ProviderAdapterConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*domain.ProviderAdapterConfig, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.ProviderAdapterConfig); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.ProviderAdapterConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderAdapterConfigRepository_ListAdapterConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAdapterConfigs'
type MockProviderAdapterConfigRepository_ListAdapterConfigs_Call struct {
	*mock.Call
}

// ListAdapterConfigs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProviderAdapterConfigRepository_Expecter) ListAdapterConfigs(ctx interface{}) *MockProviderAdapterConfigRepository_ListAdapterConfigs_Call {
	return &MockProviderAdapterConfigRepository_ListAdapterConfigs_Call{Call: _e.mock.On("ListAdapterConfigs", ctx)}
}

func (_c *MockProviderAdapterConfigRepository_ListAdapterConfigs_Call) Run(run func(ctx context.Context)) *MockProviderAdapterConfigRepository_ListAdapterConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockProviderAdapterConfigRepository_ListAdapterConfigs_Call) Return(_a0 []*domain.ProviderAdapterConfig, _a1 error) *MockProviderAdapterConfigRepository_ListAdapterConfigs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderAdapterConfigRepository_ListAdapterConfigs_Call) RunAndReturn(run func(context.Context) ([]*domain.ProviderAdapterConfig, error)) *MockProviderAdapterConfigRepository_ListAdapterConfigs_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, provider
func (_m *MockProviderAdapterConfigRepository) Update(ctx context.Context, provider *domain.ProviderAdapterConfig) error {
	ret := _m.Called(ctx, provider)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ProviderAdapterConfig) error); ok {
		r0 = rf(ctx, provider)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProviderAdapterConfigRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockProviderAdapterConfigRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - provider *domain.ProviderAdapterConfig
func (_e *MockProviderAdapterConfigRepository_Expecter) Update(ctx interface{}, provider interface{}) *MockProviderAdapterConfigRepository_Update_Call {
	return &MockProviderAdapterConfigRepository_Update_Call{Call: _e.mock.On("Update", ctx, provider)}
}

func (_c *MockProviderAdapterConfigRepository_Update_Call) Run(run func(ctx context.Context, provider *domain.ProviderAdapterConfig)) *MockProviderAdapterConfigRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.ProviderAdapterConfig))
	})
	return _c
}

func (_c *MockProviderAdapterConfigRepository_Update_Call) Return(_a0 error) *MockProviderAdapterConfigRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderAdapterConfigRepository_Update_Call) RunAndReturn(run func(context.Context, *domain.ProviderAdapterConfig) error) *MockProviderAdapterConfigRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProviderAdapterConfigRepository creates a new instance of MockProviderAdapterConfigRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProviderAdapterConfigRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProviderAdapterConfigRepository {
	mock := &MockProviderAdapterConfigRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
