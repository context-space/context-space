// Code generated by mockery v2.53.4. DO NOT EDIT.

package identityaccess_mocks

import (
	context "context"

	domain "github.com/context-space/context-space/backend/internal/identityaccess/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockUserInfoRepository is an autogenerated mock type for the UserInfoRepository type
type MockUserInfoRepository struct {
	mock.Mock
}

type MockUserInfoRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserInfoRepository) EXPECT() *MockUserInfoRepository_Expecter {
	return &MockUserInfoRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, info
func (_m *MockUserInfoRepository) Create(ctx context.Context, info *domain.UserInfo) error {
	ret := _m.Called(ctx, info)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UserInfo) error); ok {
		r0 = rf(ctx, info)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserInfoRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserInfoRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - info *domain.UserInfo
func (_e *MockUserInfoRepository_Expecter) Create(ctx interface{}, info interface{}) *MockUserInfoRepository_Create_Call {
	return &MockUserInfoRepository_Create_Call{Call: _e.mock.On("Create", ctx, info)}
}

func (_c *MockUserInfoRepository_Create_Call) Run(run func(ctx context.Context, info *domain.UserInfo)) *MockUserInfoRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.UserInfo))
	})
	return _c
}

func (_c *MockUserInfoRepository_Create_Call) Return(_a0 error) *MockUserInfoRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserInfoRepository_Create_Call) RunAndReturn(run func(context.Context, *domain.UserInfo) error) *MockUserInfoRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockUserInfoRepository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserInfoRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockUserInfoRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUserInfoRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockUserInfoRepository_Delete_Call {
	return &MockUserInfoRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockUserInfoRepository_Delete_Call) Run(run func(ctx context.Context, id string)) *MockUserInfoRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserInfoRepository_Delete_Call) Return(_a0 error) *MockUserInfoRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserInfoRepository_Delete_Call) RunAndReturn(run func(context.Context, string) error) *MockUserInfoRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockUserInfoRepository) Get(ctx context.Context, id string) (*domain.UserInfo, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.UserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.UserInfo, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.UserInfo); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserInfoRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockUserInfoRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUserInfoRepository_Expecter) Get(ctx interface{}, id interface{}) *MockUserInfoRepository_Get_Call {
	return &MockUserInfoRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockUserInfoRepository_Get_Call) Run(run func(ctx context.Context, id string)) *MockUserInfoRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserInfoRepository_Get_Call) Return(_a0 *domain.UserInfo, _a1 error) *MockUserInfoRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserInfoRepository_Get_Call) RunAndReturn(run func(context.Context, string) (*domain.UserInfo, error)) *MockUserInfoRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUserID provides a mock function with given fields: ctx, userID
func (_m *MockUserInfoRepository) GetByUserID(ctx context.Context, userID string) (*domain.UserInfo, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 *domain.UserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.UserInfo, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.UserInfo); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserInfoRepository_GetByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUserID'
type MockUserInfoRepository_GetByUserID_Call struct {
	*mock.Call
}

// GetByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockUserInfoRepository_Expecter) GetByUserID(ctx interface{}, userID interface{}) *MockUserInfoRepository_GetByUserID_Call {
	return &MockUserInfoRepository_GetByUserID_Call{Call: _e.mock.On("GetByUserID", ctx, userID)}
}

func (_c *MockUserInfoRepository_GetByUserID_Call) Run(run func(ctx context.Context, userID string)) *MockUserInfoRepository_GetByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserInfoRepository_GetByUserID_Call) Return(_a0 *domain.UserInfo, _a1 error) *MockUserInfoRepository_GetByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserInfoRepository_GetByUserID_Call) RunAndReturn(run func(context.Context, string) (*domain.UserInfo, error)) *MockUserInfoRepository_GetByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, info
func (_m *MockUserInfoRepository) Update(ctx context.Context, info *domain.UserInfo) error {
	ret := _m.Called(ctx, info)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UserInfo) error); ok {
		r0 = rf(ctx, info)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserInfoRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUserInfoRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - info *domain.UserInfo
func (_e *MockUserInfoRepository_Expecter) Update(ctx interface{}, info interface{}) *MockUserInfoRepository_Update_Call {
	return &MockUserInfoRepository_Update_Call{Call: _e.mock.On("Update", ctx, info)}
}

func (_c *MockUserInfoRepository_Update_Call) Run(run func(ctx context.Context, info *domain.UserInfo)) *MockUserInfoRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.UserInfo))
	})
	return _c
}

func (_c *MockUserInfoRepository_Update_Call) Return(_a0 error) *MockUserInfoRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserInfoRepository_Update_Call) RunAndReturn(run func(context.Context, *domain.UserInfo) error) *MockUserInfoRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserInfoRepository creates a new instance of MockUserInfoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserInfoRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserInfoRepository {
	mock := &MockUserInfoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
