// Code generated by mockery v2.53.4. DO NOT EDIT.

package credentialmanagement_mocks

import (
	context "context"

	domain "github.com/context-space/context-space/backend/internal/credentialmanagement/domain"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockOAuthStateRepository is an autogenerated mock type for the OAuthStateRepository type
type MockOAuthStateRepository struct {
	mock.Mock
}

type MockOAuthStateRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOAuthStateRepository) EXPECT() *MockOAuthStateRepository_Expecter {
	return &MockOAuthStateRepository_Expecter{mock: &_m.Mock}
}

// GetStateDataByID provides a mock function with given fields: ctx, id
func (_m *MockOAuthStateRepository) GetStateDataByID(ctx context.Context, id string) (*domain.OAuthStateData, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetStateDataByID")
	}

	var r0 *domain.OAuthStateData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.OAuthStateData, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.OAuthStateData); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.OAuthStateData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOAuthStateRepository_GetStateDataByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStateDataByID'
type MockOAuthStateRepository_GetStateDataByID_Call struct {
	*mock.Call
}

// GetStateDataByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockOAuthStateRepository_Expecter) GetStateDataByID(ctx interface{}, id interface{}) *MockOAuthStateRepository_GetStateDataByID_Call {
	return &MockOAuthStateRepository_GetStateDataByID_Call{Call: _e.mock.On("GetStateDataByID", ctx, id)}
}

func (_c *MockOAuthStateRepository_GetStateDataByID_Call) Run(run func(ctx context.Context, id string)) *MockOAuthStateRepository_GetStateDataByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockOAuthStateRepository_GetStateDataByID_Call) Return(_a0 *domain.OAuthStateData, _a1 error) *MockOAuthStateRepository_GetStateDataByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOAuthStateRepository_GetStateDataByID_Call) RunAndReturn(run func(context.Context, string) (*domain.OAuthStateData, error)) *MockOAuthStateRepository_GetStateDataByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetStateDataByState provides a mock function with given fields: ctx, state
func (_m *MockOAuthStateRepository) GetStateDataByState(ctx context.Context, state string) (*domain.OAuthStateData, error) {
	ret := _m.Called(ctx, state)

	if len(ret) == 0 {
		panic("no return value specified for GetStateDataByState")
	}

	var r0 *domain.OAuthStateData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.OAuthStateData, error)); ok {
		return rf(ctx, state)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.OAuthStateData); ok {
		r0 = rf(ctx, state)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.OAuthStateData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, state)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOAuthStateRepository_GetStateDataByState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStateDataByState'
type MockOAuthStateRepository_GetStateDataByState_Call struct {
	*mock.Call
}

// GetStateDataByState is a helper method to define mock.On call
//   - ctx context.Context
//   - state string
func (_e *MockOAuthStateRepository_Expecter) GetStateDataByState(ctx interface{}, state interface{}) *MockOAuthStateRepository_GetStateDataByState_Call {
	return &MockOAuthStateRepository_GetStateDataByState_Call{Call: _e.mock.On("GetStateDataByState", ctx, state)}
}

func (_c *MockOAuthStateRepository_GetStateDataByState_Call) Run(run func(ctx context.Context, state string)) *MockOAuthStateRepository_GetStateDataByState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockOAuthStateRepository_GetStateDataByState_Call) Return(_a0 *domain.OAuthStateData, _a1 error) *MockOAuthStateRepository_GetStateDataByState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOAuthStateRepository_GetStateDataByState_Call) RunAndReturn(run func(context.Context, string) (*domain.OAuthStateData, error)) *MockOAuthStateRepository_GetStateDataByState_Call {
	_c.Call.Return(run)
	return _c
}

// StoreStateData provides a mock function with given fields: ctx, data, expiration
func (_m *MockOAuthStateRepository) StoreStateData(ctx context.Context, data *domain.OAuthStateData, expiration time.Duration) error {
	ret := _m.Called(ctx, data, expiration)

	if len(ret) == 0 {
		panic("no return value specified for StoreStateData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.OAuthStateData, time.Duration) error); ok {
		r0 = rf(ctx, data, expiration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOAuthStateRepository_StoreStateData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreStateData'
type MockOAuthStateRepository_StoreStateData_Call struct {
	*mock.Call
}

// StoreStateData is a helper method to define mock.On call
//   - ctx context.Context
//   - data *domain.OAuthStateData
//   - expiration time.Duration
func (_e *MockOAuthStateRepository_Expecter) StoreStateData(ctx interface{}, data interface{}, expiration interface{}) *MockOAuthStateRepository_StoreStateData_Call {
	return &MockOAuthStateRepository_StoreStateData_Call{Call: _e.mock.On("StoreStateData", ctx, data, expiration)}
}

func (_c *MockOAuthStateRepository_StoreStateData_Call) Run(run func(ctx context.Context, data *domain.OAuthStateData, expiration time.Duration)) *MockOAuthStateRepository_StoreStateData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.OAuthStateData), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockOAuthStateRepository_StoreStateData_Call) Return(_a0 error) *MockOAuthStateRepository_StoreStateData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOAuthStateRepository_StoreStateData_Call) RunAndReturn(run func(context.Context, *domain.OAuthStateData, time.Duration) error) *MockOAuthStateRepository_StoreStateData_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStateData provides a mock function with given fields: ctx, data
func (_m *MockOAuthStateRepository) UpdateStateData(ctx context.Context, data *domain.OAuthStateData) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStateData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.OAuthStateData) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOAuthStateRepository_UpdateStateData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStateData'
type MockOAuthStateRepository_UpdateStateData_Call struct {
	*mock.Call
}

// UpdateStateData is a helper method to define mock.On call
//   - ctx context.Context
//   - data *domain.OAuthStateData
func (_e *MockOAuthStateRepository_Expecter) UpdateStateData(ctx interface{}, data interface{}) *MockOAuthStateRepository_UpdateStateData_Call {
	return &MockOAuthStateRepository_UpdateStateData_Call{Call: _e.mock.On("UpdateStateData", ctx, data)}
}

func (_c *MockOAuthStateRepository_UpdateStateData_Call) Run(run func(ctx context.Context, data *domain.OAuthStateData)) *MockOAuthStateRepository_UpdateStateData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.OAuthStateData))
	})
	return _c
}

func (_c *MockOAuthStateRepository_UpdateStateData_Call) Return(_a0 error) *MockOAuthStateRepository_UpdateStateData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOAuthStateRepository_UpdateStateData_Call) RunAndReturn(run func(context.Context, *domain.OAuthStateData) error) *MockOAuthStateRepository_UpdateStateData_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOAuthStateRepository creates a new instance of MockOAuthStateRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOAuthStateRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOAuthStateRepository {
	mock := &MockOAuthStateRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
