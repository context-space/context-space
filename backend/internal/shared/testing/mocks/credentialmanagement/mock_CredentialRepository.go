// Code generated by mockery v2.53.4. DO NOT EDIT.

package credentialmanagement_mocks

import (
	context "context"

	domain "github.com/context-space/context-space/backend/internal/credentialmanagement/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockCredentialRepository is an autogenerated mock type for the CredentialRepository type
type MockCredentialRepository struct {
	mock.Mock
}

type MockCredentialRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCredentialRepository) EXPECT() *MockCredentialRepository_Expecter {
	return &MockCredentialRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, credential
func (_m *MockCredentialRepository) Create(ctx context.Context, credential *domain.Credential) error {
	ret := _m.Called(ctx, credential)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Credential) error); ok {
		r0 = rf(ctx, credential)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCredentialRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockCredentialRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - credential *domain.Credential
func (_e *MockCredentialRepository_Expecter) Create(ctx interface{}, credential interface{}) *MockCredentialRepository_Create_Call {
	return &MockCredentialRepository_Create_Call{Call: _e.mock.On("Create", ctx, credential)}
}

func (_c *MockCredentialRepository_Create_Call) Run(run func(ctx context.Context, credential *domain.Credential)) *MockCredentialRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Credential))
	})
	return _c
}

func (_c *MockCredentialRepository_Create_Call) Return(_a0 error) *MockCredentialRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCredentialRepository_Create_Call) RunAndReturn(run func(context.Context, *domain.Credential) error) *MockCredentialRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockCredentialRepository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCredentialRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCredentialRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockCredentialRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockCredentialRepository_Delete_Call {
	return &MockCredentialRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockCredentialRepository_Delete_Call) Run(run func(ctx context.Context, id string)) *MockCredentialRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCredentialRepository_Delete_Call) Return(_a0 error) *MockCredentialRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCredentialRepository_Delete_Call) RunAndReturn(run func(context.Context, string) error) *MockCredentialRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockCredentialRepository) GetByID(ctx context.Context, id string) (*domain.Credential, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *domain.Credential
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Credential, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Credential); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Credential)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCredentialRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockCredentialRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockCredentialRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockCredentialRepository_GetByID_Call {
	return &MockCredentialRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockCredentialRepository_GetByID_Call) Run(run func(ctx context.Context, id string)) *MockCredentialRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCredentialRepository_GetByID_Call) Return(_a0 *domain.Credential, _a1 error) *MockCredentialRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCredentialRepository_GetByID_Call) RunAndReturn(run func(context.Context, string) (*domain.Credential, error)) *MockCredentialRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUserAndProvider provides a mock function with given fields: ctx, userID, providerIdentifier
func (_m *MockCredentialRepository) GetByUserAndProvider(ctx context.Context, userID string, providerIdentifier string) (*domain.Credential, error) {
	ret := _m.Called(ctx, userID, providerIdentifier)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserAndProvider")
	}

	var r0 *domain.Credential
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*domain.Credential, error)); ok {
		return rf(ctx, userID, providerIdentifier)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domain.Credential); ok {
		r0 = rf(ctx, userID, providerIdentifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Credential)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, providerIdentifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCredentialRepository_GetByUserAndProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUserAndProvider'
type MockCredentialRepository_GetByUserAndProvider_Call struct {
	*mock.Call
}

// GetByUserAndProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - providerIdentifier string
func (_e *MockCredentialRepository_Expecter) GetByUserAndProvider(ctx interface{}, userID interface{}, providerIdentifier interface{}) *MockCredentialRepository_GetByUserAndProvider_Call {
	return &MockCredentialRepository_GetByUserAndProvider_Call{Call: _e.mock.On("GetByUserAndProvider", ctx, userID, providerIdentifier)}
}

func (_c *MockCredentialRepository_GetByUserAndProvider_Call) Run(run func(ctx context.Context, userID string, providerIdentifier string)) *MockCredentialRepository_GetByUserAndProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockCredentialRepository_GetByUserAndProvider_Call) Return(_a0 *domain.Credential, _a1 error) *MockCredentialRepository_GetByUserAndProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCredentialRepository_GetByUserAndProvider_Call) RunAndReturn(run func(context.Context, string, string) (*domain.Credential, error)) *MockCredentialRepository_GetByUserAndProvider_Call {
	_c.Call.Return(run)
	return _c
}

// ListByID provides a mock function with given fields: ctx, ids
func (_m *MockCredentialRepository) ListByID(ctx context.Context, ids []string) ([]*domain.Credential, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for ListByID")
	}

	var r0 []*domain.Credential
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]*domain.Credential, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []*domain.Credential); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Credential)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCredentialRepository_ListByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByID'
type MockCredentialRepository_ListByID_Call struct {
	*mock.Call
}

// ListByID is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []string
func (_e *MockCredentialRepository_Expecter) ListByID(ctx interface{}, ids interface{}) *MockCredentialRepository_ListByID_Call {
	return &MockCredentialRepository_ListByID_Call{Call: _e.mock.On("ListByID", ctx, ids)}
}

func (_c *MockCredentialRepository_ListByID_Call) Run(run func(ctx context.Context, ids []string)) *MockCredentialRepository_ListByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockCredentialRepository_ListByID_Call) Return(_a0 []*domain.Credential, _a1 error) *MockCredentialRepository_ListByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCredentialRepository_ListByID_Call) RunAndReturn(run func(context.Context, []string) ([]*domain.Credential, error)) *MockCredentialRepository_ListByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListByUser provides a mock function with given fields: ctx, userID
func (_m *MockCredentialRepository) ListByUser(ctx context.Context, userID string) ([]*domain.Credential, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for ListByUser")
	}

	var r0 []*domain.Credential
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*domain.Credential, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*domain.Credential); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Credential)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCredentialRepository_ListByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByUser'
type MockCredentialRepository_ListByUser_Call struct {
	*mock.Call
}

// ListByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockCredentialRepository_Expecter) ListByUser(ctx interface{}, userID interface{}) *MockCredentialRepository_ListByUser_Call {
	return &MockCredentialRepository_ListByUser_Call{Call: _e.mock.On("ListByUser", ctx, userID)}
}

func (_c *MockCredentialRepository_ListByUser_Call) Run(run func(ctx context.Context, userID string)) *MockCredentialRepository_ListByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCredentialRepository_ListByUser_Call) Return(_a0 []*domain.Credential, _a1 error) *MockCredentialRepository_ListByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCredentialRepository_ListByUser_Call) RunAndReturn(run func(context.Context, string) ([]*domain.Credential, error)) *MockCredentialRepository_ListByUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLastUsedAt provides a mock function with given fields: ctx, id
func (_m *MockCredentialRepository) UpdateLastUsedAt(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLastUsedAt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCredentialRepository_UpdateLastUsedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLastUsedAt'
type MockCredentialRepository_UpdateLastUsedAt_Call struct {
	*mock.Call
}

// UpdateLastUsedAt is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockCredentialRepository_Expecter) UpdateLastUsedAt(ctx interface{}, id interface{}) *MockCredentialRepository_UpdateLastUsedAt_Call {
	return &MockCredentialRepository_UpdateLastUsedAt_Call{Call: _e.mock.On("UpdateLastUsedAt", ctx, id)}
}

func (_c *MockCredentialRepository_UpdateLastUsedAt_Call) Run(run func(ctx context.Context, id string)) *MockCredentialRepository_UpdateLastUsedAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCredentialRepository_UpdateLastUsedAt_Call) Return(_a0 error) *MockCredentialRepository_UpdateLastUsedAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCredentialRepository_UpdateLastUsedAt_Call) RunAndReturn(run func(context.Context, string) error) *MockCredentialRepository_UpdateLastUsedAt_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCredentialRepository creates a new instance of MockCredentialRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCredentialRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCredentialRepository {
	mock := &MockCredentialRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
