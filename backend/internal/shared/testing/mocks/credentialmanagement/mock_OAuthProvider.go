// Code generated by mockery v2.53.4. DO NOT EDIT.

package credentialmanagement_mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	oauth2 "golang.org/x/oauth2"
)

// MockOAuthProvider is an autogenerated mock type for the OAuthProvider type
type MockOAuthProvider struct {
	mock.Mock
}

type MockOAuthProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOAuthProvider) EXPECT() *MockOAuthProvider_Expecter {
	return &MockOAuthProvider_Expecter{mock: &_m.Mock}
}

// ExchangeCodeForToken provides a mock function with given fields: ctx, providerIdentifier, code, redirectURL, codeVerifier
func (_m *MockOAuthProvider) ExchangeCodeForToken(ctx context.Context, providerIdentifier string, code string, redirectURL string, codeVerifier string) (*oauth2.Token, error) {
	ret := _m.Called(ctx, providerIdentifier, code, redirectURL, codeVerifier)

	if len(ret) == 0 {
		panic("no return value specified for ExchangeCodeForToken")
	}

	var r0 *oauth2.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (*oauth2.Token, error)); ok {
		return rf(ctx, providerIdentifier, code, redirectURL, codeVerifier)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) *oauth2.Token); ok {
		r0 = rf(ctx, providerIdentifier, code, redirectURL, codeVerifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, providerIdentifier, code, redirectURL, codeVerifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOAuthProvider_ExchangeCodeForToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExchangeCodeForToken'
type MockOAuthProvider_ExchangeCodeForToken_Call struct {
	*mock.Call
}

// ExchangeCodeForToken is a helper method to define mock.On call
//   - ctx context.Context
//   - providerIdentifier string
//   - code string
//   - redirectURL string
//   - codeVerifier string
func (_e *MockOAuthProvider_Expecter) ExchangeCodeForToken(ctx interface{}, providerIdentifier interface{}, code interface{}, redirectURL interface{}, codeVerifier interface{}) *MockOAuthProvider_ExchangeCodeForToken_Call {
	return &MockOAuthProvider_ExchangeCodeForToken_Call{Call: _e.mock.On("ExchangeCodeForToken", ctx, providerIdentifier, code, redirectURL, codeVerifier)}
}

func (_c *MockOAuthProvider_ExchangeCodeForToken_Call) Run(run func(ctx context.Context, providerIdentifier string, code string, redirectURL string, codeVerifier string)) *MockOAuthProvider_ExchangeCodeForToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockOAuthProvider_ExchangeCodeForToken_Call) Return(_a0 *oauth2.Token, _a1 error) *MockOAuthProvider_ExchangeCodeForToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOAuthProvider_ExchangeCodeForToken_Call) RunAndReturn(run func(context.Context, string, string, string, string) (*oauth2.Token, error)) *MockOAuthProvider_ExchangeCodeForToken_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateOAuthURL provides a mock function with given fields: ctx, providerIdentifier, redirectURL, state, codeChallenge, scopes
func (_m *MockOAuthProvider) GenerateOAuthURL(ctx context.Context, providerIdentifier string, redirectURL string, state string, codeChallenge string, scopes []string) (string, error) {
	ret := _m.Called(ctx, providerIdentifier, redirectURL, state, codeChallenge, scopes)

	if len(ret) == 0 {
		panic("no return value specified for GenerateOAuthURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, []string) (string, error)); ok {
		return rf(ctx, providerIdentifier, redirectURL, state, codeChallenge, scopes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, []string) string); ok {
		r0 = rf(ctx, providerIdentifier, redirectURL, state, codeChallenge, scopes)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, []string) error); ok {
		r1 = rf(ctx, providerIdentifier, redirectURL, state, codeChallenge, scopes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOAuthProvider_GenerateOAuthURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateOAuthURL'
type MockOAuthProvider_GenerateOAuthURL_Call struct {
	*mock.Call
}

// GenerateOAuthURL is a helper method to define mock.On call
//   - ctx context.Context
//   - providerIdentifier string
//   - redirectURL string
//   - state string
//   - codeChallenge string
//   - scopes []string
func (_e *MockOAuthProvider_Expecter) GenerateOAuthURL(ctx interface{}, providerIdentifier interface{}, redirectURL interface{}, state interface{}, codeChallenge interface{}, scopes interface{}) *MockOAuthProvider_GenerateOAuthURL_Call {
	return &MockOAuthProvider_GenerateOAuthURL_Call{Call: _e.mock.On("GenerateOAuthURL", ctx, providerIdentifier, redirectURL, state, codeChallenge, scopes)}
}

func (_c *MockOAuthProvider_GenerateOAuthURL_Call) Run(run func(ctx context.Context, providerIdentifier string, redirectURL string, state string, codeChallenge string, scopes []string)) *MockOAuthProvider_GenerateOAuthURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].([]string))
	})
	return _c
}

func (_c *MockOAuthProvider_GenerateOAuthURL_Call) Return(_a0 string, _a1 error) *MockOAuthProvider_GenerateOAuthURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOAuthProvider_GenerateOAuthURL_Call) RunAndReturn(run func(context.Context, string, string, string, string, []string) (string, error)) *MockOAuthProvider_GenerateOAuthURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissionIdentifiersFromScopes provides a mock function with given fields: ctx, providerIdentifier, scopes
func (_m *MockOAuthProvider) GetPermissionIdentifiersFromScopes(ctx context.Context, providerIdentifier string, scopes []string) ([]string, error) {
	ret := _m.Called(ctx, providerIdentifier, scopes)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionIdentifiersFromScopes")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) ([]string, error)); ok {
		return rf(ctx, providerIdentifier, scopes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) []string); ok {
		r0 = rf(ctx, providerIdentifier, scopes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, providerIdentifier, scopes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOAuthProvider_GetPermissionIdentifiersFromScopes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissionIdentifiersFromScopes'
type MockOAuthProvider_GetPermissionIdentifiersFromScopes_Call struct {
	*mock.Call
}

// GetPermissionIdentifiersFromScopes is a helper method to define mock.On call
//   - ctx context.Context
//   - providerIdentifier string
//   - scopes []string
func (_e *MockOAuthProvider_Expecter) GetPermissionIdentifiersFromScopes(ctx interface{}, providerIdentifier interface{}, scopes interface{}) *MockOAuthProvider_GetPermissionIdentifiersFromScopes_Call {
	return &MockOAuthProvider_GetPermissionIdentifiersFromScopes_Call{Call: _e.mock.On("GetPermissionIdentifiersFromScopes", ctx, providerIdentifier, scopes)}
}

func (_c *MockOAuthProvider_GetPermissionIdentifiersFromScopes_Call) Run(run func(ctx context.Context, providerIdentifier string, scopes []string)) *MockOAuthProvider_GetPermissionIdentifiersFromScopes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockOAuthProvider_GetPermissionIdentifiersFromScopes_Call) Return(_a0 []string, _a1 error) *MockOAuthProvider_GetPermissionIdentifiersFromScopes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOAuthProvider_GetPermissionIdentifiersFromScopes_Call) RunAndReturn(run func(context.Context, string, []string) ([]string, error)) *MockOAuthProvider_GetPermissionIdentifiersFromScopes_Call {
	_c.Call.Return(run)
	return _c
}

// GetScopesFromPermissions provides a mock function with given fields: ctx, providerIdentifier, permissions
func (_m *MockOAuthProvider) GetScopesFromPermissions(ctx context.Context, providerIdentifier string, permissions []string) ([]string, error) {
	ret := _m.Called(ctx, providerIdentifier, permissions)

	if len(ret) == 0 {
		panic("no return value specified for GetScopesFromPermissions")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) ([]string, error)); ok {
		return rf(ctx, providerIdentifier, permissions)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) []string); ok {
		r0 = rf(ctx, providerIdentifier, permissions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, providerIdentifier, permissions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOAuthProvider_GetScopesFromPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScopesFromPermissions'
type MockOAuthProvider_GetScopesFromPermissions_Call struct {
	*mock.Call
}

// GetScopesFromPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - providerIdentifier string
//   - permissions []string
func (_e *MockOAuthProvider_Expecter) GetScopesFromPermissions(ctx interface{}, providerIdentifier interface{}, permissions interface{}) *MockOAuthProvider_GetScopesFromPermissions_Call {
	return &MockOAuthProvider_GetScopesFromPermissions_Call{Call: _e.mock.On("GetScopesFromPermissions", ctx, providerIdentifier, permissions)}
}

func (_c *MockOAuthProvider_GetScopesFromPermissions_Call) Run(run func(ctx context.Context, providerIdentifier string, permissions []string)) *MockOAuthProvider_GetScopesFromPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockOAuthProvider_GetScopesFromPermissions_Call) Return(_a0 []string, _a1 error) *MockOAuthProvider_GetScopesFromPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOAuthProvider_GetScopesFromPermissions_Call) RunAndReturn(run func(context.Context, string, []string) ([]string, error)) *MockOAuthProvider_GetScopesFromPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function with given fields: ctx, providerIdentifier, oldToken
func (_m *MockOAuthProvider) RefreshToken(ctx context.Context, providerIdentifier string, oldToken *oauth2.Token) (*oauth2.Token, error) {
	ret := _m.Called(ctx, providerIdentifier, oldToken)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 *oauth2.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *oauth2.Token) (*oauth2.Token, error)); ok {
		return rf(ctx, providerIdentifier, oldToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *oauth2.Token) *oauth2.Token); ok {
		r0 = rf(ctx, providerIdentifier, oldToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *oauth2.Token) error); ok {
		r1 = rf(ctx, providerIdentifier, oldToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOAuthProvider_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type MockOAuthProvider_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - providerIdentifier string
//   - oldToken *oauth2.Token
func (_e *MockOAuthProvider_Expecter) RefreshToken(ctx interface{}, providerIdentifier interface{}, oldToken interface{}) *MockOAuthProvider_RefreshToken_Call {
	return &MockOAuthProvider_RefreshToken_Call{Call: _e.mock.On("RefreshToken", ctx, providerIdentifier, oldToken)}
}

func (_c *MockOAuthProvider_RefreshToken_Call) Run(run func(ctx context.Context, providerIdentifier string, oldToken *oauth2.Token)) *MockOAuthProvider_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*oauth2.Token))
	})
	return _c
}

func (_c *MockOAuthProvider_RefreshToken_Call) Return(_a0 *oauth2.Token, _a1 error) *MockOAuthProvider_RefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOAuthProvider_RefreshToken_Call) RunAndReturn(run func(context.Context, string, *oauth2.Token) (*oauth2.Token, error)) *MockOAuthProvider_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// ShouldRefreshToken provides a mock function with given fields: providerIdentifier, oldToken
func (_m *MockOAuthProvider) ShouldRefreshToken(providerIdentifier string, oldToken *oauth2.Token) (bool, error) {
	ret := _m.Called(providerIdentifier, oldToken)

	if len(ret) == 0 {
		panic("no return value specified for ShouldRefreshToken")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *oauth2.Token) (bool, error)); ok {
		return rf(providerIdentifier, oldToken)
	}
	if rf, ok := ret.Get(0).(func(string, *oauth2.Token) bool); ok {
		r0 = rf(providerIdentifier, oldToken)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, *oauth2.Token) error); ok {
		r1 = rf(providerIdentifier, oldToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOAuthProvider_ShouldRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShouldRefreshToken'
type MockOAuthProvider_ShouldRefreshToken_Call struct {
	*mock.Call
}

// ShouldRefreshToken is a helper method to define mock.On call
//   - providerIdentifier string
//   - oldToken *oauth2.Token
func (_e *MockOAuthProvider_Expecter) ShouldRefreshToken(providerIdentifier interface{}, oldToken interface{}) *MockOAuthProvider_ShouldRefreshToken_Call {
	return &MockOAuthProvider_ShouldRefreshToken_Call{Call: _e.mock.On("ShouldRefreshToken", providerIdentifier, oldToken)}
}

func (_c *MockOAuthProvider_ShouldRefreshToken_Call) Run(run func(providerIdentifier string, oldToken *oauth2.Token)) *MockOAuthProvider_ShouldRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*oauth2.Token))
	})
	return _c
}

func (_c *MockOAuthProvider_ShouldRefreshToken_Call) Return(_a0 bool, _a1 error) *MockOAuthProvider_ShouldRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOAuthProvider_ShouldRefreshToken_Call) RunAndReturn(run func(string, *oauth2.Token) (bool, error)) *MockOAuthProvider_ShouldRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOAuthProvider creates a new instance of MockOAuthProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOAuthProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOAuthProvider {
	mock := &MockOAuthProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
