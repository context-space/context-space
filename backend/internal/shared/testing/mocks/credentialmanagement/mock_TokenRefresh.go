// Code generated by mockery v2.53.4. DO NOT EDIT.

package credentialmanagement_mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockTokenRefresh is an autogenerated mock type for the TokenRefresh type
type MockTokenRefresh struct {
	mock.Mock
}

type MockTokenRefresh_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokenRefresh) EXPECT() *MockTokenRefresh_Expecter {
	return &MockTokenRefresh_Expecter{mock: &_m.Mock}
}

// RefreshAccessTokenIfNeeded provides a mock function with given fields: ctx, providerIdentifier, credential
func (_m *MockTokenRefresh) RefreshAccessTokenIfNeeded(ctx context.Context, providerIdentifier string, credential interface{}) (interface{}, error) {
	ret := _m.Called(ctx, providerIdentifier, credential)

	if len(ret) == 0 {
		panic("no return value specified for RefreshAccessTokenIfNeeded")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) (interface{}, error)); ok {
		return rf(ctx, providerIdentifier, credential)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) interface{}); ok {
		r0 = rf(ctx, providerIdentifier, credential)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, providerIdentifier, credential)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenRefresh_RefreshAccessTokenIfNeeded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshAccessTokenIfNeeded'
type MockTokenRefresh_RefreshAccessTokenIfNeeded_Call struct {
	*mock.Call
}

// RefreshAccessTokenIfNeeded is a helper method to define mock.On call
//   - ctx context.Context
//   - providerIdentifier string
//   - credential interface{}
func (_e *MockTokenRefresh_Expecter) RefreshAccessTokenIfNeeded(ctx interface{}, providerIdentifier interface{}, credential interface{}) *MockTokenRefresh_RefreshAccessTokenIfNeeded_Call {
	return &MockTokenRefresh_RefreshAccessTokenIfNeeded_Call{Call: _e.mock.On("RefreshAccessTokenIfNeeded", ctx, providerIdentifier, credential)}
}

func (_c *MockTokenRefresh_RefreshAccessTokenIfNeeded_Call) Run(run func(ctx context.Context, providerIdentifier string, credential interface{})) *MockTokenRefresh_RefreshAccessTokenIfNeeded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockTokenRefresh_RefreshAccessTokenIfNeeded_Call) Return(_a0 interface{}, _a1 error) *MockTokenRefresh_RefreshAccessTokenIfNeeded_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenRefresh_RefreshAccessTokenIfNeeded_Call) RunAndReturn(run func(context.Context, string, interface{}) (interface{}, error)) *MockTokenRefresh_RefreshAccessTokenIfNeeded_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshAccessTokens provides a mock function with given fields: ctx
func (_m *MockTokenRefresh) RefreshAccessTokens(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RefreshAccessTokens")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTokenRefresh_RefreshAccessTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshAccessTokens'
type MockTokenRefresh_RefreshAccessTokens_Call struct {
	*mock.Call
}

// RefreshAccessTokens is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTokenRefresh_Expecter) RefreshAccessTokens(ctx interface{}) *MockTokenRefresh_RefreshAccessTokens_Call {
	return &MockTokenRefresh_RefreshAccessTokens_Call{Call: _e.mock.On("RefreshAccessTokens", ctx)}
}

func (_c *MockTokenRefresh_RefreshAccessTokens_Call) Run(run func(ctx context.Context)) *MockTokenRefresh_RefreshAccessTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTokenRefresh_RefreshAccessTokens_Call) Return(_a0 error) *MockTokenRefresh_RefreshAccessTokens_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTokenRefresh_RefreshAccessTokens_Call) RunAndReturn(run func(context.Context) error) *MockTokenRefresh_RefreshAccessTokens_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTokenRefresh creates a new instance of MockTokenRefresh. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTokenRefresh(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTokenRefresh {
	mock := &MockTokenRefresh{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
