// Code generated by mockery v2.53.4. DO NOT EDIT.

package credentialmanagement_mocks

import (
	context "context"

	domain "github.com/context-space/context-space/backend/internal/credentialmanagement/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockOAuthStateService is an autogenerated mock type for the OAuthStateService type
type MockOAuthStateService struct {
	mock.Mock
}

type MockOAuthStateService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOAuthStateService) EXPECT() *MockOAuthStateService_Expecter {
	return &MockOAuthStateService_Expecter{mock: &_m.Mock}
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockOAuthStateService) GetByID(ctx context.Context, id string) (*domain.OAuthStateData, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *domain.OAuthStateData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.OAuthStateData, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.OAuthStateData); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.OAuthStateData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOAuthStateService_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockOAuthStateService_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockOAuthStateService_Expecter) GetByID(ctx interface{}, id interface{}) *MockOAuthStateService_GetByID_Call {
	return &MockOAuthStateService_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockOAuthStateService_GetByID_Call) Run(run func(ctx context.Context, id string)) *MockOAuthStateService_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockOAuthStateService_GetByID_Call) Return(_a0 *domain.OAuthStateData, _a1 error) *MockOAuthStateService_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOAuthStateService_GetByID_Call) RunAndReturn(run func(context.Context, string) (*domain.OAuthStateData, error)) *MockOAuthStateService_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByState provides a mock function with given fields: ctx, state
func (_m *MockOAuthStateService) GetByState(ctx context.Context, state string) (*domain.OAuthStateData, error) {
	ret := _m.Called(ctx, state)

	if len(ret) == 0 {
		panic("no return value specified for GetByState")
	}

	var r0 *domain.OAuthStateData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.OAuthStateData, error)); ok {
		return rf(ctx, state)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.OAuthStateData); ok {
		r0 = rf(ctx, state)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.OAuthStateData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, state)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOAuthStateService_GetByState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByState'
type MockOAuthStateService_GetByState_Call struct {
	*mock.Call
}

// GetByState is a helper method to define mock.On call
//   - ctx context.Context
//   - state string
func (_e *MockOAuthStateService_Expecter) GetByState(ctx interface{}, state interface{}) *MockOAuthStateService_GetByState_Call {
	return &MockOAuthStateService_GetByState_Call{Call: _e.mock.On("GetByState", ctx, state)}
}

func (_c *MockOAuthStateService_GetByState_Call) Run(run func(ctx context.Context, state string)) *MockOAuthStateService_GetByState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockOAuthStateService_GetByState_Call) Return(_a0 *domain.OAuthStateData, _a1 error) *MockOAuthStateService_GetByState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOAuthStateService_GetByState_Call) RunAndReturn(run func(context.Context, string) (*domain.OAuthStateData, error)) *MockOAuthStateService_GetByState_Call {
	_c.Call.Return(run)
	return _c
}

// StoreStateData provides a mock function with given fields: ctx, data
func (_m *MockOAuthStateService) StoreStateData(ctx context.Context, data *domain.OAuthStateData) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for StoreStateData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.OAuthStateData) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOAuthStateService_StoreStateData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreStateData'
type MockOAuthStateService_StoreStateData_Call struct {
	*mock.Call
}

// StoreStateData is a helper method to define mock.On call
//   - ctx context.Context
//   - data *domain.OAuthStateData
func (_e *MockOAuthStateService_Expecter) StoreStateData(ctx interface{}, data interface{}) *MockOAuthStateService_StoreStateData_Call {
	return &MockOAuthStateService_StoreStateData_Call{Call: _e.mock.On("StoreStateData", ctx, data)}
}

func (_c *MockOAuthStateService_StoreStateData_Call) Run(run func(ctx context.Context, data *domain.OAuthStateData)) *MockOAuthStateService_StoreStateData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.OAuthStateData))
	})
	return _c
}

func (_c *MockOAuthStateService_StoreStateData_Call) Return(_a0 error) *MockOAuthStateService_StoreStateData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOAuthStateService_StoreStateData_Call) RunAndReturn(run func(context.Context, *domain.OAuthStateData) error) *MockOAuthStateService_StoreStateData_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStateData provides a mock function with given fields: ctx, data
func (_m *MockOAuthStateService) UpdateStateData(ctx context.Context, data *domain.OAuthStateData) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStateData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.OAuthStateData) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOAuthStateService_UpdateStateData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStateData'
type MockOAuthStateService_UpdateStateData_Call struct {
	*mock.Call
}

// UpdateStateData is a helper method to define mock.On call
//   - ctx context.Context
//   - data *domain.OAuthStateData
func (_e *MockOAuthStateService_Expecter) UpdateStateData(ctx interface{}, data interface{}) *MockOAuthStateService_UpdateStateData_Call {
	return &MockOAuthStateService_UpdateStateData_Call{Call: _e.mock.On("UpdateStateData", ctx, data)}
}

func (_c *MockOAuthStateService_UpdateStateData_Call) Run(run func(ctx context.Context, data *domain.OAuthStateData)) *MockOAuthStateService_UpdateStateData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.OAuthStateData))
	})
	return _c
}

func (_c *MockOAuthStateService_UpdateStateData_Call) Return(_a0 error) *MockOAuthStateService_UpdateStateData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOAuthStateService_UpdateStateData_Call) RunAndReturn(run func(context.Context, *domain.OAuthStateData) error) *MockOAuthStateService_UpdateStateData_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOAuthStateService creates a new instance of MockOAuthStateService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOAuthStateService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOAuthStateService {
	mock := &MockOAuthStateService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
