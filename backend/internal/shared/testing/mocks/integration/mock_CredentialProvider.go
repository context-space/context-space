// Code generated by mockery v2.53.4. DO NOT EDIT.

package integration_mocks

import (
	context "context"

	domain "github.com/context-space/context-space/backend/internal/credentialmanagement/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockCredentialProvider is an autogenerated mock type for the CredentialProvider type
type MockCredentialProvider struct {
	mock.Mock
}

type MockCredentialProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCredentialProvider) EXPECT() *MockCredentialProvider_Expecter {
	return &MockCredentialProvider_Expecter{mock: &_m.Mock}
}

// CreateNone provides a mock function with given fields: ctx, userID, providerIdentifier
func (_m *MockCredentialProvider) CreateNone(ctx context.Context, userID string, providerIdentifier string) (*domain.NoneCredential, error) {
	ret := _m.Called(ctx, userID, providerIdentifier)

	if len(ret) == 0 {
		panic("no return value specified for CreateNone")
	}

	var r0 *domain.NoneCredential
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*domain.NoneCredential, error)); ok {
		return rf(ctx, userID, providerIdentifier)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domain.NoneCredential); ok {
		r0 = rf(ctx, userID, providerIdentifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.NoneCredential)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, providerIdentifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCredentialProvider_CreateNone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNone'
type MockCredentialProvider_CreateNone_Call struct {
	*mock.Call
}

// CreateNone is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - providerIdentifier string
func (_e *MockCredentialProvider_Expecter) CreateNone(ctx interface{}, userID interface{}, providerIdentifier interface{}) *MockCredentialProvider_CreateNone_Call {
	return &MockCredentialProvider_CreateNone_Call{Call: _e.mock.On("CreateNone", ctx, userID, providerIdentifier)}
}

func (_c *MockCredentialProvider_CreateNone_Call) Run(run func(ctx context.Context, userID string, providerIdentifier string)) *MockCredentialProvider_CreateNone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockCredentialProvider_CreateNone_Call) Return(_a0 *domain.NoneCredential, _a1 error) *MockCredentialProvider_CreateNone_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCredentialProvider_CreateNone_Call) RunAndReturn(run func(context.Context, string, string) (*domain.NoneCredential, error)) *MockCredentialProvider_CreateNone_Call {
	_c.Call.Return(run)
	return _c
}

// GetCredentialByUserAndProvider provides a mock function with given fields: ctx, userID, providerIdentifier
func (_m *MockCredentialProvider) GetCredentialByUserAndProvider(ctx context.Context, userID string, providerIdentifier string) (interface{}, error) {
	ret := _m.Called(ctx, userID, providerIdentifier)

	if len(ret) == 0 {
		panic("no return value specified for GetCredentialByUserAndProvider")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (interface{}, error)); ok {
		return rf(ctx, userID, providerIdentifier)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) interface{}); ok {
		r0 = rf(ctx, userID, providerIdentifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, providerIdentifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCredentialProvider_GetCredentialByUserAndProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCredentialByUserAndProvider'
type MockCredentialProvider_GetCredentialByUserAndProvider_Call struct {
	*mock.Call
}

// GetCredentialByUserAndProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - providerIdentifier string
func (_e *MockCredentialProvider_Expecter) GetCredentialByUserAndProvider(ctx interface{}, userID interface{}, providerIdentifier interface{}) *MockCredentialProvider_GetCredentialByUserAndProvider_Call {
	return &MockCredentialProvider_GetCredentialByUserAndProvider_Call{Call: _e.mock.On("GetCredentialByUserAndProvider", ctx, userID, providerIdentifier)}
}

func (_c *MockCredentialProvider_GetCredentialByUserAndProvider_Call) Run(run func(ctx context.Context, userID string, providerIdentifier string)) *MockCredentialProvider_GetCredentialByUserAndProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockCredentialProvider_GetCredentialByUserAndProvider_Call) Return(_a0 interface{}, _a1 error) *MockCredentialProvider_GetCredentialByUserAndProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCredentialProvider_GetCredentialByUserAndProvider_Call) RunAndReturn(run func(context.Context, string, string) (interface{}, error)) *MockCredentialProvider_GetCredentialByUserAndProvider_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCredentialLastUsedAt provides a mock function with given fields: ctx, credential
func (_m *MockCredentialProvider) UpdateCredentialLastUsedAt(ctx context.Context, credential interface{}) error {
	ret := _m.Called(ctx, credential)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCredentialLastUsedAt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, credential)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCredentialProvider_UpdateCredentialLastUsedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCredentialLastUsedAt'
type MockCredentialProvider_UpdateCredentialLastUsedAt_Call struct {
	*mock.Call
}

// UpdateCredentialLastUsedAt is a helper method to define mock.On call
//   - ctx context.Context
//   - credential interface{}
func (_e *MockCredentialProvider_Expecter) UpdateCredentialLastUsedAt(ctx interface{}, credential interface{}) *MockCredentialProvider_UpdateCredentialLastUsedAt_Call {
	return &MockCredentialProvider_UpdateCredentialLastUsedAt_Call{Call: _e.mock.On("UpdateCredentialLastUsedAt", ctx, credential)}
}

func (_c *MockCredentialProvider_UpdateCredentialLastUsedAt_Call) Run(run func(ctx context.Context, credential interface{})) *MockCredentialProvider_UpdateCredentialLastUsedAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *MockCredentialProvider_UpdateCredentialLastUsedAt_Call) Return(_a0 error) *MockCredentialProvider_UpdateCredentialLastUsedAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCredentialProvider_UpdateCredentialLastUsedAt_Call) RunAndReturn(run func(context.Context, interface{}) error) *MockCredentialProvider_UpdateCredentialLastUsedAt_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCredentialProvider creates a new instance of MockCredentialProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCredentialProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCredentialProvider {
	mock := &MockCredentialProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
