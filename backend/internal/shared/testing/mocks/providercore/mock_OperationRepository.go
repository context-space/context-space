// Code generated by mockery v2.53.4. DO NOT EDIT.

package providercore_mocks

import (
	context "context"

	domain "github.com/context-space/context-space/backend/internal/providercore/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockOperationRepository is an autogenerated mock type for the OperationRepository type
type MockOperationRepository struct {
	mock.Mock
}

type MockOperationRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOperationRepository) EXPECT() *MockOperationRepository_Expecter {
	return &MockOperationRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, operation
func (_m *MockOperationRepository) Create(ctx context.Context, operation *domain.Operation) error {
	ret := _m.Called(ctx, operation)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Operation) error); ok {
		r0 = rf(ctx, operation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOperationRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockOperationRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - operation *domain.Operation
func (_e *MockOperationRepository_Expecter) Create(ctx interface{}, operation interface{}) *MockOperationRepository_Create_Call {
	return &MockOperationRepository_Create_Call{Call: _e.mock.On("Create", ctx, operation)}
}

func (_c *MockOperationRepository_Create_Call) Run(run func(ctx context.Context, operation *domain.Operation)) *MockOperationRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Operation))
	})
	return _c
}

func (_c *MockOperationRepository_Create_Call) Return(_a0 error) *MockOperationRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOperationRepository_Create_Call) RunAndReturn(run func(context.Context, *domain.Operation) error) *MockOperationRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockOperationRepository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOperationRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockOperationRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockOperationRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockOperationRepository_Delete_Call {
	return &MockOperationRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockOperationRepository_Delete_Call) Run(run func(ctx context.Context, id string)) *MockOperationRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockOperationRepository_Delete_Call) Return(_a0 error) *MockOperationRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOperationRepository_Delete_Call) RunAndReturn(run func(context.Context, string) error) *MockOperationRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockOperationRepository) GetByID(ctx context.Context, id string) (*domain.Operation, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *domain.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Operation, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Operation); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOperationRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockOperationRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockOperationRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockOperationRepository_GetByID_Call {
	return &MockOperationRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockOperationRepository_GetByID_Call) Run(run func(ctx context.Context, id string)) *MockOperationRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockOperationRepository_GetByID_Call) Return(_a0 *domain.Operation, _a1 error) *MockOperationRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOperationRepository_GetByID_Call) RunAndReturn(run func(context.Context, string) (*domain.Operation, error)) *MockOperationRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByProviderIDAndIdentifier provides a mock function with given fields: ctx, providerID, identifier
func (_m *MockOperationRepository) GetByProviderIDAndIdentifier(ctx context.Context, providerID string, identifier string) (*domain.Operation, error) {
	ret := _m.Called(ctx, providerID, identifier)

	if len(ret) == 0 {
		panic("no return value specified for GetByProviderIDAndIdentifier")
	}

	var r0 *domain.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*domain.Operation, error)); ok {
		return rf(ctx, providerID, identifier)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domain.Operation); ok {
		r0 = rf(ctx, providerID, identifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, providerID, identifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOperationRepository_GetByProviderIDAndIdentifier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByProviderIDAndIdentifier'
type MockOperationRepository_GetByProviderIDAndIdentifier_Call struct {
	*mock.Call
}

// GetByProviderIDAndIdentifier is a helper method to define mock.On call
//   - ctx context.Context
//   - providerID string
//   - identifier string
func (_e *MockOperationRepository_Expecter) GetByProviderIDAndIdentifier(ctx interface{}, providerID interface{}, identifier interface{}) *MockOperationRepository_GetByProviderIDAndIdentifier_Call {
	return &MockOperationRepository_GetByProviderIDAndIdentifier_Call{Call: _e.mock.On("GetByProviderIDAndIdentifier", ctx, providerID, identifier)}
}

func (_c *MockOperationRepository_GetByProviderIDAndIdentifier_Call) Run(run func(ctx context.Context, providerID string, identifier string)) *MockOperationRepository_GetByProviderIDAndIdentifier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockOperationRepository_GetByProviderIDAndIdentifier_Call) Return(_a0 *domain.Operation, _a1 error) *MockOperationRepository_GetByProviderIDAndIdentifier_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOperationRepository_GetByProviderIDAndIdentifier_Call) RunAndReturn(run func(context.Context, string, string) (*domain.Operation, error)) *MockOperationRepository_GetByProviderIDAndIdentifier_Call {
	_c.Call.Return(run)
	return _c
}

// ListByProviderID provides a mock function with given fields: ctx, providerID
func (_m *MockOperationRepository) ListByProviderID(ctx context.Context, providerID string) ([]*domain.Operation, error) {
	ret := _m.Called(ctx, providerID)

	if len(ret) == 0 {
		panic("no return value specified for ListByProviderID")
	}

	var r0 []*domain.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*domain.Operation, error)); ok {
		return rf(ctx, providerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*domain.Operation); ok {
		r0 = rf(ctx, providerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, providerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOperationRepository_ListByProviderID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByProviderID'
type MockOperationRepository_ListByProviderID_Call struct {
	*mock.Call
}

// ListByProviderID is a helper method to define mock.On call
//   - ctx context.Context
//   - providerID string
func (_e *MockOperationRepository_Expecter) ListByProviderID(ctx interface{}, providerID interface{}) *MockOperationRepository_ListByProviderID_Call {
	return &MockOperationRepository_ListByProviderID_Call{Call: _e.mock.On("ListByProviderID", ctx, providerID)}
}

func (_c *MockOperationRepository_ListByProviderID_Call) Run(run func(ctx context.Context, providerID string)) *MockOperationRepository_ListByProviderID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockOperationRepository_ListByProviderID_Call) Return(_a0 []*domain.Operation, _a1 error) *MockOperationRepository_ListByProviderID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOperationRepository_ListByProviderID_Call) RunAndReturn(run func(context.Context, string) ([]*domain.Operation, error)) *MockOperationRepository_ListByProviderID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, operation
func (_m *MockOperationRepository) Update(ctx context.Context, operation *domain.Operation) error {
	ret := _m.Called(ctx, operation)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Operation) error); ok {
		r0 = rf(ctx, operation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOperationRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockOperationRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - operation *domain.Operation
func (_e *MockOperationRepository_Expecter) Update(ctx interface{}, operation interface{}) *MockOperationRepository_Update_Call {
	return &MockOperationRepository_Update_Call{Call: _e.mock.On("Update", ctx, operation)}
}

func (_c *MockOperationRepository_Update_Call) Run(run func(ctx context.Context, operation *domain.Operation)) *MockOperationRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Operation))
	})
	return _c
}

func (_c *MockOperationRepository_Update_Call) Return(_a0 error) *MockOperationRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOperationRepository_Update_Call) RunAndReturn(run func(context.Context, *domain.Operation) error) *MockOperationRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOperationRepository creates a new instance of MockOperationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOperationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOperationRepository {
	mock := &MockOperationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
